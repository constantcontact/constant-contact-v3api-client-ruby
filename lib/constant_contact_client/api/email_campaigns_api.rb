=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.87
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module ConstantContactClient
  class EmailCampaignsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # POST (Create) a New Email Campaign
    # Use this method to create a new email campaign. This method also creates new `primary_email` and `permalink` email campaign activities and associates them with the new email campaign.  The request body must contain the `name` property and the `email_campaign_activities` array. The `name` must be unique. The `email_campaign_activities` array contains the main content of your email campaign and must include `format_type`, `from_name`, `from_email`, `reply_to_email`, `subject`, and `html_content` properties. The `from_email` address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
    # @param create_email_campaign_request [CreateEmailCampaignRequest] A JSON request body that contains the email content.
    # @param [Hash] opts the optional parameters
    # @return [CreateEmailCampaign200Response]
    def create_email_campaign(create_email_campaign_request, opts = {})
      data, _status_code, _headers = create_email_campaign_with_http_info(create_email_campaign_request, opts)
      data
    end

    # POST (Create) a New Email Campaign
    # Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
    # @param create_email_campaign_request [CreateEmailCampaignRequest] A JSON request body that contains the email content.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateEmailCampaign200Response, Integer, Hash)>] CreateEmailCampaign200Response data, response status code and response headers
    def create_email_campaign_with_http_info(create_email_campaign_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.create_email_campaign ...'
      end
      # verify the required parameter 'create_email_campaign_request' is set
      if @api_client.config.client_side_validation && create_email_campaign_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_email_campaign_request' when calling EmailCampaignsApi.create_email_campaign"
      end
      # resource path
      local_var_path = '/emails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_email_campaign_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEmailCampaign200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.create_email_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#create_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # POST a Resend to Non-openers Campaign Activity
    # Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current `status` of `Draft`, `Scheduled`, or `Done`. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of `delay_days` or `delay_minutes` (properties are mutually exclusive) before resending to non-openers. If you set both `delay_days` or `delay_minutes`, `delay_minutes` is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
    # @param campaign_activity_id [String] The unique ID for the primary email campaign activity.
    # @param create_resend_email_campaign_request [CreateResendEmailCampaignRequest] A JSON request body that specifies when to resend the campaign activity to non-openers.
    # @param [Hash] opts the optional parameters
    # @return [CreateResendEmailCampaign201Response]
    def create_resend_email_campaign(campaign_activity_id, create_resend_email_campaign_request, opts = {})
      data, _status_code, _headers = create_resend_email_campaign_with_http_info(campaign_activity_id, create_resend_email_campaign_request, opts)
      data
    end

    # POST a Resend to Non-openers Campaign Activity
    # Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
    # @param campaign_activity_id [String] The unique ID for the primary email campaign activity.
    # @param create_resend_email_campaign_request [CreateResendEmailCampaignRequest] A JSON request body that specifies when to resend the campaign activity to non-openers.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateResendEmailCampaign201Response, Integer, Hash)>] CreateResendEmailCampaign201Response data, response status code and response headers
    def create_resend_email_campaign_with_http_info(campaign_activity_id, create_resend_email_campaign_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.create_resend_email_campaign ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailCampaignsApi.create_resend_email_campaign"
      end
      # verify the required parameter 'create_resend_email_campaign_request' is set
      if @api_client.config.client_side_validation && create_resend_email_campaign_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_resend_email_campaign_request' when calling EmailCampaignsApi.create_resend_email_campaign"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/non_opener_resends'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_resend_email_campaign_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateResendEmailCampaign201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.create_resend_email_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#create_resend_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DELETE an Email Campaign
    # Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a `Scheduled` status.  Constant Contact users can restore deleted email campaigns using the UI. 
    # @param campaign_id [String] The unique ID for the email campaign you are deleting.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_email_campaign(campaign_id, opts = {})
      delete_email_campaign_with_http_info(campaign_id, opts)
      nil
    end

    # DELETE an Email Campaign
    # Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
    # @param campaign_id [String] The unique ID for the email campaign you are deleting.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_email_campaign_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.delete_email_campaign ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling EmailCampaignsApi.delete_email_campaign"
      end
      # resource path
      local_var_path = '/emails/{campaign_id}'.sub('{' + 'campaign_id' + '}', CGI.escape(campaign_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.delete_email_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#delete_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DELETE a Resend to Non Openers Activity
    # Use this `DELETE` method to delete (unschedule) a resend to non openers activity.
    # @param campaign_activity_id [String] The unique ID for the primary email campaign activity.
    # @param resend_request_id [String] The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resend_email_campaign(campaign_activity_id, resend_request_id, opts = {})
      delete_resend_email_campaign_with_http_info(campaign_activity_id, resend_request_id, opts)
      nil
    end

    # DELETE a Resend to Non Openers Activity
    # Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
    # @param campaign_activity_id [String] The unique ID for the primary email campaign activity.
    # @param resend_request_id [String] The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_resend_email_campaign_with_http_info(campaign_activity_id, resend_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.delete_resend_email_campaign ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailCampaignsApi.delete_resend_email_campaign"
      end
      # verify the required parameter 'resend_request_id' is set
      if @api_client.config.client_side_validation && resend_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'resend_request_id' when calling EmailCampaignsApi.delete_resend_email_campaign"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/non_opener_resends/{resend_request_id}'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s)).sub('{' + 'resend_request_id' + '}', CGI.escape(resend_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.delete_resend_email_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#delete_resend_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a Collection of Email Campaigns
    # Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the `after_date` and `before_date` query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET `/emails/{campaign_id}` endpoint.\" <div class=\"Msg\"><p class=\"note-text\">This method does not currently support filtering results using the email campaign creation date.</p></div> 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (default to 50)
    # @option opts [Time] :before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range.
    # @option opts [Time] :after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range.
    # @return [GetAllEmailCampaigns200Response]
    def get_all_email_campaigns(opts = {})
      data, _status_code, _headers = get_all_email_campaigns_with_http_info(opts)
      data
    end

    # GET a Collection of Email Campaigns
    # Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (default to 50)
    # @option opts [Time] :before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range.
    # @option opts [Time] :after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range.
    # @return [Array<(GetAllEmailCampaigns200Response, Integer, Hash)>] GetAllEmailCampaigns200Response data, response status code and response headers
    def get_all_email_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.get_all_email_campaigns ...'
      end
      # resource path
      local_var_path = '/emails'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'before_date'] = opts[:'before_date'] if !opts[:'before_date'].nil?
      query_params[:'after_date'] = opts[:'after_date'] if !opts[:'after_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAllEmailCampaigns200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.get_all_email_campaigns",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#get_all_email_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a Single Email Campaign Activity
    # Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a `REMOVED` status. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;.
    # @return [GetEmailCampaignActivity200Response]
    def get_email_campaign_activity(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_email_campaign_activity_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET a Single Email Campaign Activity
    # Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;.
    # @return [Array<(GetEmailCampaignActivity200Response, Integer, Hash)>] GetEmailCampaignActivity200Response data, response status code and response headers
    def get_email_campaign_activity_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.get_email_campaign_activity ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailCampaignsApi.get_email_campaign_activity"
      end
      allowable_values = ["physical_address_in_footer", "permalink_url", "html_content", "document_properties"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailCampaignActivity200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.get_email_campaign_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#get_email_campaign_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET Details About a Single Email Campaign
    # Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the `campaign_activity_id` and `role`.
    # @param campaign_id [String] The ID (UUID format) that uniquely identifies this email campaign.
    # @param [Hash] opts the optional parameters
    # @return [CreateEmailCampaign200Response]
    def get_email_campaign_by_id(campaign_id, opts = {})
      data, _status_code, _headers = get_email_campaign_by_id_with_http_info(campaign_id, opts)
      data
    end

    # GET Details About a Single Email Campaign
    # Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
    # @param campaign_id [String] The ID (UUID format) that uniquely identifies this email campaign.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateEmailCampaign200Response, Integer, Hash)>] CreateEmailCampaign200Response data, response status code and response headers
    def get_email_campaign_by_id_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.get_email_campaign_by_id ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling EmailCampaignsApi.get_email_campaign_by_id"
      end
      # resource path
      local_var_path = '/emails/{campaign_id}'.sub('{' + 'campaign_id' + '}', CGI.escape(campaign_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEmailCampaign200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.get_email_campaign_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#get_email_campaign_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a Collection of V2 and V3 API Email Campaign Identifiers
    # <div class=\"Msg Msg--warning\"><p class=\"note-text\">Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.</p></div>  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the `v2_email_campaign_ids` query parameter, this method returns the corresponding V3 `campaign_id` and V3 `campaign_activity_id` UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
    # @param v2_email_campaign_ids [String] Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.
    # @param [Hash] opts the optional parameters
    # @return [GetEmailCampaignXrefs200Response]
    def get_email_campaign_xrefs(v2_email_campaign_ids, opts = {})
      data, _status_code, _headers = get_email_campaign_xrefs_with_http_info(v2_email_campaign_ids, opts)
      data
    end

    # GET a Collection of V2 and V3 API Email Campaign Identifiers
    # &lt;div class&#x3D;\&quot;Msg Msg--warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
    # @param v2_email_campaign_ids [String] Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEmailCampaignXrefs200Response, Integer, Hash)>] GetEmailCampaignXrefs200Response data, response status code and response headers
    def get_email_campaign_xrefs_with_http_info(v2_email_campaign_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.get_email_campaign_xrefs ...'
      end
      # verify the required parameter 'v2_email_campaign_ids' is set
      if @api_client.config.client_side_validation && v2_email_campaign_ids.nil?
        fail ArgumentError, "Missing the required parameter 'v2_email_campaign_ids' when calling EmailCampaignsApi.get_email_campaign_xrefs"
      end
      # resource path
      local_var_path = '/emails/campaign_id_xrefs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v2_email_campaign_ids'] = v2_email_campaign_ids

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailCampaignXrefs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.get_email_campaign_xrefs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#get_email_campaign_xrefs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET Details for a Resend to Non-openers Campaign Activity
    # Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified `campaign_activity_id`, an empty list is returned in the results. You can only create one resend activity per email campaign.
    # @param campaign_activity_id [String] The unique ID for the primary email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<GetResendEmailCampaign200ResponseInner>]
    def get_resend_email_campaign(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_resend_email_campaign_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET Details for a Resend to Non-openers Campaign Activity
    # Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
    # @param campaign_activity_id [String] The unique ID for the primary email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetResendEmailCampaign200ResponseInner>, Integer, Hash)>] Array<GetResendEmailCampaign200ResponseInner> data, response status code and response headers
    def get_resend_email_campaign_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.get_resend_email_campaign ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailCampaignsApi.get_resend_email_campaign"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/non_opener_resends'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetResendEmailCampaign200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.get_resend_email_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#get_resend_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PATCH (Update) an Email Campaign Name
    # Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a `Removed` status.
    # @param campaign_id [String] The unique identifier for an email campaign.
    # @param patch_email_campaign_name_request [PatchEmailCampaignNameRequest] A JSON payload that contains the new email campaign name.
    # @param [Hash] opts the optional parameters
    # @return [CreateEmailCampaign200Response]
    def patch_email_campaign_name(campaign_id, patch_email_campaign_name_request, opts = {})
      data, _status_code, _headers = patch_email_campaign_name_with_http_info(campaign_id, patch_email_campaign_name_request, opts)
      data
    end

    # PATCH (Update) an Email Campaign Name
    # Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
    # @param campaign_id [String] The unique identifier for an email campaign.
    # @param patch_email_campaign_name_request [PatchEmailCampaignNameRequest] A JSON payload that contains the new email campaign name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateEmailCampaign200Response, Integer, Hash)>] CreateEmailCampaign200Response data, response status code and response headers
    def patch_email_campaign_name_with_http_info(campaign_id, patch_email_campaign_name_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.patch_email_campaign_name ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling EmailCampaignsApi.patch_email_campaign_name"
      end
      # verify the required parameter 'patch_email_campaign_name_request' is set
      if @api_client.config.client_side_validation && patch_email_campaign_name_request.nil?
        fail ArgumentError, "Missing the required parameter 'patch_email_campaign_name_request' when calling EmailCampaignsApi.patch_email_campaign_name"
      end
      # resource path
      local_var_path = '/emails/{campaign_id}'.sub('{' + 'campaign_id' + '}', CGI.escape(campaign_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_email_campaign_name_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEmailCampaign200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.patch_email_campaign_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#patch_email_campaign_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PUT (Update) An Email Campaign Activity
    # Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the `from_name`, `from_email`, `reply_to_email`, and `subject` properties.  You can only update email campaign activities that have the `primary_email` role and that are in `DRAFT` or `Done` status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers `physical_address_in_footer`, `document_properties`, `html_content`, and `permalink_url` subresources of the email campaign activity. 
    # @param campaign_activity_id [String] The unique ID for the email campaign activity you are updating.
    # @param get_email_campaign_activity200_response [GetEmailCampaignActivity200Response] A request body payload that contains the complete email campaign activity with your changes.
    # @param [Hash] opts the optional parameters
    # @return [GetEmailCampaignActivity200Response]
    def update_email_campaign_activity(campaign_activity_id, get_email_campaign_activity200_response, opts = {})
      data, _status_code, _headers = update_email_campaign_activity_with_http_info(campaign_activity_id, get_email_campaign_activity200_response, opts)
      data
    end

    # PUT (Update) An Email Campaign Activity
    # Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
    # @param campaign_activity_id [String] The unique ID for the email campaign activity you are updating.
    # @param get_email_campaign_activity200_response [GetEmailCampaignActivity200Response] A request body payload that contains the complete email campaign activity with your changes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEmailCampaignActivity200Response, Integer, Hash)>] GetEmailCampaignActivity200Response data, response status code and response headers
    def update_email_campaign_activity_with_http_info(campaign_activity_id, get_email_campaign_activity200_response, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailCampaignsApi.update_email_campaign_activity ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailCampaignsApi.update_email_campaign_activity"
      end
      # verify the required parameter 'get_email_campaign_activity200_response' is set
      if @api_client.config.client_side_validation && get_email_campaign_activity200_response.nil?
        fail ArgumentError, "Missing the required parameter 'get_email_campaign_activity200_response' when calling EmailCampaignsApi.update_email_campaign_activity"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_email_campaign_activity200_response)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailCampaignActivity200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailCampaignsApi.update_email_campaign_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailCampaignsApi#update_email_campaign_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
