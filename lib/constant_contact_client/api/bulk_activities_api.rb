=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.109
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module ConstantContactClient
  class BulkActivitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Import Contacts using a CSV File
    # This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact automatically sets the contact's `permission_to_send` property as `implicit` and the `opt_in_source` property as `Account`. Importing an existing contact only updates the contact properties you include in the request.  The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
    # @param file [File] The CSV file you are importing. The column headings that you can use in the file are: &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;email&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, and &#x60;country&#x60;. The only required column heading is &#x60;email&#x60;.  You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.
    # @param list_ids [Array<String>] Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.
    # @param [Hash] opts the optional parameters
    # @return [CreateCSVImportActivity201Response]
    def create_csv_import_activity(file, list_ids, opts = {})
      data, _status_code, _headers = create_csv_import_activity_with_http_info(file, list_ids, opts)
      data
    end

    # Import Contacts using a CSV File
    # This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request.  The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
    # @param file [File] The CSV file you are importing. The column headings that you can use in the file are: &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;email&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, and &#x60;country&#x60;. The only required column heading is &#x60;email&#x60;.  You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.
    # @param list_ids [Array<String>] Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCSVImportActivity201Response, Integer, Hash)>] CreateCSVImportActivity201Response data, response status code and response headers
    def create_csv_import_activity_with_http_info(file, list_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_csv_import_activity ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling BulkActivitiesApi.create_csv_import_activity"
      end
      # verify the required parameter 'list_ids' is set
      if @api_client.config.client_side_validation && list_ids.nil?
        fail ArgumentError, "Missing the required parameter 'list_ids' when calling BulkActivitiesApi.create_csv_import_activity"
      end
      if @api_client.config.client_side_validation && list_ids.length > 50
        fail ArgumentError, 'invalid value for "list_ids" when calling BulkActivitiesApi.create_csv_import_activity, number of items must be less than or equal to 50.'
      end

      # resource path
      local_var_path = '/activities/contacts_file_import'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['list_ids'] = @api_client.build_collection_param(list_ids, :csv)

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCSVImportActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_csv_import_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_csv_import_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Contacts in Bulk
    # Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
    # @param create_delete_activity_request [CreateDeleteActivityRequest] The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.
    # @param [Hash] opts the optional parameters
    # @return [CreateDeleteActivity201Response]
    def create_delete_activity(create_delete_activity_request, opts = {})
      data, _status_code, _headers = create_delete_activity_with_http_info(create_delete_activity_request, opts)
      data
    end

    # Delete Contacts in Bulk
    # Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
    # @param create_delete_activity_request [CreateDeleteActivityRequest] The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDeleteActivity201Response, Integer, Hash)>] CreateDeleteActivity201Response data, response status code and response headers
    def create_delete_activity_with_http_info(create_delete_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_delete_activity ...'
      end
      # verify the required parameter 'create_delete_activity_request' is set
      if @api_client.config.client_side_validation && create_delete_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_delete_activity_request' when calling BulkActivitiesApi.create_delete_activity"
      end
      # resource path
      local_var_path = '/activities/contact_delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_delete_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateDeleteActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_delete_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_delete_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Contacts to a File
    # Use this method to create an activity that exports contacts and contact details to a CSV file. By default, all contacts are exported. To filter contacts to export, specify the source to use, `contact_id`, `list_id`, or `segment_id` (all mutually exclusive). By default, all contact related fields are exported. Use the fields array to only export specific contact fields. You must export `email_address` to successfully export `email_optin_source`, `email_optin_date`, `email_optout_source`, `email_optout_date`, or `email_optout_reason`. After Constant Contact finishes processing the activity, use the `results` link in the response body to retrieve the CSV file.
    # @param create_export_activity_request [CreateExportActivityRequest] A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.
    # @param [Hash] opts the optional parameters
    # @return [CreateExportActivity201Response]
    def create_export_activity(create_export_activity_request, opts = {})
      data, _status_code, _headers = create_export_activity_with_http_info(create_export_activity_request, opts)
      data
    end

    # Export Contacts to a File
    # Use this method to create an activity that exports contacts and contact details to a CSV file. By default, all contacts are exported. To filter contacts to export, specify the source to use, &#x60;contact_id&#x60;, &#x60;list_id&#x60;, or &#x60;segment_id&#x60; (all mutually exclusive). By default, all contact related fields are exported. Use the fields array to only export specific contact fields. You must export &#x60;email_address&#x60; to successfully export &#x60;email_optin_source&#x60;, &#x60;email_optin_date&#x60;, &#x60;email_optout_source&#x60;, &#x60;email_optout_date&#x60;, or &#x60;email_optout_reason&#x60;. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
    # @param create_export_activity_request [CreateExportActivityRequest] A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateExportActivity201Response, Integer, Hash)>] CreateExportActivity201Response data, response status code and response headers
    def create_export_activity_with_http_info(create_export_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_export_activity ...'
      end
      # verify the required parameter 'create_export_activity_request' is set
      if @api_client.config.client_side_validation && create_export_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_export_activity_request' when calling BulkActivitiesApi.create_export_activity"
      end
      # resource path
      local_var_path = '/activities/contact_exports'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_export_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateExportActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_export_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_export_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import Contacts using a JSON Payload
    # Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. Importing a new contact automatically sets the contact's `permission_to_send` property as `implicit` and the `opt_in_source` property as `Account`. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported. To import custom fields, prefix the custom field name with `cf:` and add it as a contact property. For example, use the property name `cf:first_name` if you have a custom field named first_name. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
    # @param create_import_json_activity_request [CreateImportJSONActivityRequest] The JSON request payload that contains the contact data and contact lists for the import.
    # @param [Hash] opts the optional parameters
    # @return [CreateCSVImportActivity201Response]
    def create_import_json_activity(create_import_json_activity_request, opts = {})
      data, _status_code, _headers = create_import_json_activity_with_http_info(create_import_json_activity_request, opts)
      data
    end

    # Import Contacts using a JSON Payload
    # Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. Importing a new contact automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported. To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named first_name. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
    # @param create_import_json_activity_request [CreateImportJSONActivityRequest] The JSON request payload that contains the contact data and contact lists for the import.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCSVImportActivity201Response, Integer, Hash)>] CreateCSVImportActivity201Response data, response status code and response headers
    def create_import_json_activity_with_http_info(create_import_json_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_import_json_activity ...'
      end
      # verify the required parameter 'create_import_json_activity_request' is set
      if @api_client.config.client_side_validation && create_import_json_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_import_json_activity_request' when calling BulkActivitiesApi.create_import_json_activity"
      end
      # resource path
      local_var_path = '/activities/contacts_json_import'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_import_json_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCSVImportActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_import_json_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_import_json_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Contacts to Lists
    # Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the `source` object to specify the contacts you want to add to lists. Use the `list_ids` array to specify which lists you want to add your source contacts to.
    # @param create_list_add_activity_request [CreateListAddActivityRequest] The JSON payload used to create the &#39;add contacts to lists&#39; activity
    # @param [Hash] opts the optional parameters
    # @return [CreateListRemoveActivity201Response]
    def create_list_add_activity(create_list_add_activity_request, opts = {})
      data, _status_code, _headers = create_list_add_activity_with_http_info(create_list_add_activity_request, opts)
      data
    end

    # Add Contacts to Lists
    # Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
    # @param create_list_add_activity_request [CreateListAddActivityRequest] The JSON payload used to create the &#39;add contacts to lists&#39; activity
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateListRemoveActivity201Response, Integer, Hash)>] CreateListRemoveActivity201Response data, response status code and response headers
    def create_list_add_activity_with_http_info(create_list_add_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_list_add_activity ...'
      end
      # verify the required parameter 'create_list_add_activity_request' is set
      if @api_client.config.client_side_validation && create_list_add_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_list_add_activity_request' when calling BulkActivitiesApi.create_list_add_activity"
      end
      # resource path
      local_var_path = '/activities/add_list_memberships'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_list_add_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateListRemoveActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_list_add_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_list_add_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Contact Lists
    # Use this endpoint to delete up to 100 contact lists in an account. 
    # @param create_list_delete_activity_request [CreateListDeleteActivityRequest] An array of &#x60;list_id&#x60;&#39;s to delete.
    # @param [Hash] opts the optional parameters
    # @return [CreateListDeleteActivity201Response]
    def create_list_delete_activity(create_list_delete_activity_request, opts = {})
      data, _status_code, _headers = create_list_delete_activity_with_http_info(create_list_delete_activity_request, opts)
      data
    end

    # Delete Contact Lists
    # Use this endpoint to delete up to 100 contact lists in an account. 
    # @param create_list_delete_activity_request [CreateListDeleteActivityRequest] An array of &#x60;list_id&#x60;&#39;s to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateListDeleteActivity201Response, Integer, Hash)>] CreateListDeleteActivity201Response data, response status code and response headers
    def create_list_delete_activity_with_http_info(create_list_delete_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_list_delete_activity ...'
      end
      # verify the required parameter 'create_list_delete_activity_request' is set
      if @api_client.config.client_side_validation && create_list_delete_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_list_delete_activity_request' when calling BulkActivitiesApi.create_list_delete_activity"
      end
      # resource path
      local_var_path = '/activities/list_delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_list_delete_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateListDeleteActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_list_delete_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_list_delete_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Contacts from Lists
    # Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the `source` object to remove specific contacts from your lists. Use the `list_ids` array to specify the target lists from which contacts are removed. Optionally, if the source is  `all_active_contacts` (billable) or `list_ids`, use the `exclude` object to exclude specific contacts from being removed from the destination lists.
    # @param create_list_remove_activity_request [CreateListRemoveActivityRequest] The JSON payload used to create the Remove Contacts from Lists&#39; activity
    # @param [Hash] opts the optional parameters
    # @return [CreateListRemoveActivity201Response]
    def create_list_remove_activity(create_list_remove_activity_request, opts = {})
      data, _status_code, _headers = create_list_remove_activity_with_http_info(create_list_remove_activity_request, opts)
      data
    end

    # Remove Contacts from Lists
    # Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
    # @param create_list_remove_activity_request [CreateListRemoveActivityRequest] The JSON payload used to create the Remove Contacts from Lists&#39; activity
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateListRemoveActivity201Response, Integer, Hash)>] CreateListRemoveActivity201Response data, response status code and response headers
    def create_list_remove_activity_with_http_info(create_list_remove_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_list_remove_activity ...'
      end
      # verify the required parameter 'create_list_remove_activity_request' is set
      if @api_client.config.client_side_validation && create_list_remove_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_list_remove_activity_request' when calling BulkActivitiesApi.create_list_remove_activity"
      end
      # resource path
      local_var_path = '/activities/remove_list_memberships'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_list_remove_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateListRemoveActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_list_remove_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_list_remove_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Tags to Contacts
    # Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the `source` type to identify contacts from which the specified tags (`tag_id`) are added. Source criteria are mutually exclusive. If the source is `all_active_contacts` or `list_ids`, you can optionally choose to `exclude` contacts by `contact_id`. Use the activity link in the results to check the status of your request. For more use case information, see \"[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
    # @param create_tag_remove_activity_request [CreateTagRemoveActivityRequest] The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.
    # @param [Hash] opts the optional parameters
    # @return [CreateTagRemoveActivity201Response]
    def create_tag_add_contact_activity(create_tag_remove_activity_request, opts = {})
      data, _status_code, _headers = create_tag_add_contact_activity_with_http_info(create_tag_remove_activity_request, opts)
      data
    end

    # Add Tags to Contacts
    # Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
    # @param create_tag_remove_activity_request [CreateTagRemoveActivityRequest] The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTagRemoveActivity201Response, Integer, Hash)>] CreateTagRemoveActivity201Response data, response status code and response headers
    def create_tag_add_contact_activity_with_http_info(create_tag_remove_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_tag_add_contact_activity ...'
      end
      # verify the required parameter 'create_tag_remove_activity_request' is set
      if @api_client.config.client_side_validation && create_tag_remove_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_tag_remove_activity_request' when calling BulkActivitiesApi.create_tag_add_contact_activity"
      end
      # resource path
      local_var_path = '/activities/contacts_taggings_add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_tag_remove_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTagRemoveActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_tag_add_contact_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_tag_add_contact_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Tags
    # Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the `tag_ids` array of string values in the request body to specify which tags to delete.
    # @param create_tag_delete_activity_request [CreateTagDeleteActivityRequest] An array of string values (&#x60;tag_id&#x60;s) to delete.
    # @param [Hash] opts the optional parameters
    # @return [CreateTagRemoveActivity201Response]
    def create_tag_delete_activity(create_tag_delete_activity_request, opts = {})
      data, _status_code, _headers = create_tag_delete_activity_with_http_info(create_tag_delete_activity_request, opts)
      data
    end

    # Delete Tags
    # Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
    # @param create_tag_delete_activity_request [CreateTagDeleteActivityRequest] An array of string values (&#x60;tag_id&#x60;s) to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTagRemoveActivity201Response, Integer, Hash)>] CreateTagRemoveActivity201Response data, response status code and response headers
    def create_tag_delete_activity_with_http_info(create_tag_delete_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_tag_delete_activity ...'
      end
      # verify the required parameter 'create_tag_delete_activity_request' is set
      if @api_client.config.client_side_validation && create_tag_delete_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_tag_delete_activity_request' when calling BulkActivitiesApi.create_tag_delete_activity"
      end
      # resource path
      local_var_path = '/activities/contacts_tags_delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_tag_delete_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTagRemoveActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_tag_delete_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_tag_delete_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Tags from Contacts
    # Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the `source` type used to identify contacts from which the specified tags (`tag_id`) are removed. Source types are mutually exclusive. If the specified source is either `all_active_contacts` or `list_ids`, you can optionally choose to `exclude` specified contacts by `contact_id`. Use the activity link in the results to check the status of your request.\" For more use case information, see \"[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
    # @param create_tag_remove_activity_request [CreateTagRemoveActivityRequest] The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.
    # @param [Hash] opts the optional parameters
    # @return [CreateTagRemoveActivity201Response]
    def create_tag_remove_activity(create_tag_remove_activity_request, opts = {})
      data, _status_code, _headers = create_tag_remove_activity_with_http_info(create_tag_remove_activity_request, opts)
      data
    end

    # Remove Tags from Contacts
    # Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
    # @param create_tag_remove_activity_request [CreateTagRemoveActivityRequest] The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTagRemoveActivity201Response, Integer, Hash)>] CreateTagRemoveActivity201Response data, response status code and response headers
    def create_tag_remove_activity_with_http_info(create_tag_remove_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.create_tag_remove_activity ...'
      end
      # verify the required parameter 'create_tag_remove_activity_request' is set
      if @api_client.config.client_side_validation && create_tag_remove_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_tag_remove_activity_request' when calling BulkActivitiesApi.create_tag_remove_activity"
      end
      # resource path
      local_var_path = '/activities/contacts_taggings_remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_tag_remove_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTagRemoveActivity201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.create_tag_remove_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#create_tag_remove_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Activity Status
    # This endpoint returns an activity status report.
    # @param activity_id [String] The unique ID of the activity to GET
    # @param [Hash] opts the optional parameters
    # @return [GetActivityById200Response]
    def get_activity_by_id(activity_id, opts = {})
      data, _status_code, _headers = get_activity_by_id_with_http_info(activity_id, opts)
      data
    end

    # GET an Activity Status
    # This endpoint returns an activity status report.
    # @param activity_id [String] The unique ID of the activity to GET
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetActivityById200Response, Integer, Hash)>] GetActivityById200Response data, response status code and response headers
    def get_activity_by_id_with_http_info(activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.get_activity_by_id ...'
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling BulkActivitiesApi.get_activity_by_id"
      end
      # resource path
      local_var_path = '/activities/{activity_id}'.sub('{' + 'activity_id' + '}', CGI.escape(activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetActivityById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.get_activity_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#get_activity_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET Activity Status Collection
    # This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (default to 50)
    # @option opts [String] :state Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out.
    # @return [GetAllActivities200Response]
    def get_all_activities(opts = {})
      data, _status_code, _headers = get_all_activities_with_http_info(opts)
      data
    end

    # GET Activity Status Collection
    # This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (default to 50)
    # @option opts [String] :state Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out.
    # @return [Array<(GetAllActivities200Response, Integer, Hash)>] GetAllActivities200Response data, response status code and response headers
    def get_all_activities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.get_all_activities ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BulkActivitiesApi.get_all_activities, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BulkActivitiesApi.get_all_activities, must be greater than or equal to 1.'
      end

      allowable_values = ["processing", "completed", "cancelled", "failed", "timed_out"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/activities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAllActivities200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.get_all_activities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#get_all_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Exported Contacts File
    # Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the `activity_id` of a completed CSV export activity.  
    # @param file_export_id [String] The unique ID of the exported file provided in the results: section of the export contacts activity response.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_csv_export_file(file_export_id, opts = {})
      data, _status_code, _headers = get_csv_export_file_with_http_info(file_export_id, opts)
      data
    end

    # Retrieve Exported Contacts File
    # Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
    # @param file_export_id [String] The unique ID of the exported file provided in the results: section of the export contacts activity response.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_csv_export_file_with_http_info(file_export_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.get_csv_export_file ...'
      end
      # verify the required parameter 'file_export_id' is set
      if @api_client.config.client_side_validation && file_export_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_export_id' when calling BulkActivitiesApi.get_csv_export_file"
      end
      # resource path
      local_var_path = '/contact_exports/{file_export_id}'.sub('{' + 'file_export_id' + '}', CGI.escape(file_export_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.get_csv_export_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#get_csv_export_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Custom Fields
    # Use this endpoint to delete up to 100 custom fields for an account. 
    # @param post_custom_field_delete_request [PostCustomFieldDeleteRequest] An array of &#x60;custom_field_id&#x60;&#39;s to delete.
    # @param [Hash] opts the optional parameters
    # @return [PostCustomFieldDelete201Response]
    def post_custom_field_delete(post_custom_field_delete_request, opts = {})
      data, _status_code, _headers = post_custom_field_delete_with_http_info(post_custom_field_delete_request, opts)
      data
    end

    # Delete Custom Fields
    # Use this endpoint to delete up to 100 custom fields for an account. 
    # @param post_custom_field_delete_request [PostCustomFieldDeleteRequest] An array of &#x60;custom_field_id&#x60;&#39;s to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostCustomFieldDelete201Response, Integer, Hash)>] PostCustomFieldDelete201Response data, response status code and response headers
    def post_custom_field_delete_with_http_info(post_custom_field_delete_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkActivitiesApi.post_custom_field_delete ...'
      end
      # verify the required parameter 'post_custom_field_delete_request' is set
      if @api_client.config.client_side_validation && post_custom_field_delete_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_custom_field_delete_request' when calling BulkActivitiesApi.post_custom_field_delete"
      end
      # resource path
      local_var_path = '/activities/custom_fields_delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_custom_field_delete_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostCustomFieldDelete201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"BulkActivitiesApi.post_custom_field_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkActivitiesApi#post_custom_field_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
