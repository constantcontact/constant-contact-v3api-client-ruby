=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.90
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module ConstantContactClient
  class ContactListsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # POST (create) a List
    # Create a new contact list resource
    # @param update_list_request [UpdateListRequest] JSON payload defining the new contact list
    # @param [Hash] opts the optional parameters
    # @return [UpdateList200Response]
    def create_list(update_list_request, opts = {})
      data, _status_code, _headers = create_list_with_http_info(update_list_request, opts)
      data
    end

    # POST (create) a List
    # Create a new contact list resource
    # @param update_list_request [UpdateListRequest] JSON payload defining the new contact list
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateList200Response, Integer, Hash)>] UpdateList200Response data, response status code and response headers
    def create_list_with_http_info(update_list_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactListsApi.create_list ...'
      end
      # verify the required parameter 'update_list_request' is set
      if @api_client.config.client_side_validation && update_list_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_list_request' when calling ContactListsApi.create_list"
      end
      # resource path
      local_var_path = '/contact_lists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_list_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactListsApi.create_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactListsApi#create_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DELETE a List
    # Deletes the specified contact list and its membership. DELETE List requests are processed asynchronously, and you can track the status of the request by making a GET call to the URI shown in the `_links` property in the response.
    # @param list_id [String] Unique ID of the list to delete
    # @param [Hash] opts the optional parameters
    # @return [DeleteList202Response]
    def delete_list(list_id, opts = {})
      data, _status_code, _headers = delete_list_with_http_info(list_id, opts)
      data
    end

    # DELETE a List
    # Deletes the specified contact list and its membership. DELETE List requests are processed asynchronously, and you can track the status of the request by making a GET call to the URI shown in the &#x60;_links&#x60; property in the response.
    # @param list_id [String] Unique ID of the list to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteList202Response, Integer, Hash)>] DeleteList202Response data, response status code and response headers
    def delete_list_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactListsApi.delete_list ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactListsApi.delete_list"
      end
      # resource path
      local_var_path = '/contact_lists/{list_id}'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteList202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactListsApi.delete_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactListsApi#delete_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET Lists Collection
    # Use this method to return details about all contact lists for the account. <div class=\"Msg\"><p class=\"note-text\">This method does not currently support filtering results using the contact list update date.</p></div>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Use to specify the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (default to 50)
    # @option opts [Boolean] :include_count Set &#x60;include_count&#x60; to &#x60;true&#x60; to return the total number of contact lists that meet your selection criteria. (default to false)
    # @option opts [String] :include_membership_count Use to include the total number of contacts per list. Set to  &#x60;active&#x60;, to count only active (mailable) contacts, or &#x60;all&#x60; to count all contacts.
    # @option opts [String] :name Use to get details for a single list by entering the full name of the list.
    # @option opts [String] :status Use to get lists by status. Accepts comma-separated status values.
    # @return [GetAllLists200Response]
    def get_all_lists(opts = {})
      data, _status_code, _headers = get_all_lists_with_http_info(opts)
      data
    end

    # GET Lists Collection
    # Use this method to return details about all contact lists for the account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the contact list update date.&lt;/p&gt;&lt;/div&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Use to specify the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (default to 50)
    # @option opts [Boolean] :include_count Set &#x60;include_count&#x60; to &#x60;true&#x60; to return the total number of contact lists that meet your selection criteria. (default to false)
    # @option opts [String] :include_membership_count Use to include the total number of contacts per list. Set to  &#x60;active&#x60;, to count only active (mailable) contacts, or &#x60;all&#x60; to count all contacts.
    # @option opts [String] :name Use to get details for a single list by entering the full name of the list.
    # @option opts [String] :status Use to get lists by status. Accepts comma-separated status values.
    # @return [Array<(GetAllLists200Response, Integer, Hash)>] GetAllLists200Response data, response status code and response headers
    def get_all_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactListsApi.get_all_lists ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ContactListsApi.get_all_lists, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ContactListsApi.get_all_lists, must be greater than or equal to 1.'
      end

      allowable_values = ["all", "active"]
      if @api_client.config.client_side_validation && opts[:'include_membership_count'] && !allowable_values.include?(opts[:'include_membership_count'])
        fail ArgumentError, "invalid value for \"include_membership_count\", must be one of #{allowable_values}"
      end
      allowable_values = ["all", "active", "deleted"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/contact_lists'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_count'] = opts[:'include_count'] if !opts[:'include_count'].nil?
      query_params[:'include_membership_count'] = opts[:'include_membership_count'] if !opts[:'include_membership_count'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAllLists200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactListsApi.get_all_lists",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactListsApi#get_all_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a List
    # Use this method to get details about a specific contact list (`list_id`).
    # @param list_id [String] The system generated ID that uniquely identifies a contact list.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include_membership_count Returns the total number of contacts per list that meet your selection criteria. Set the &#x60;include_membership_count&#x60; to &#x60;active&#x60;, to count only active contacts, or &#x60;all&#x60; to include all contacts in the count.
    # @return [GetList200Response]
    def get_list(list_id, opts = {})
      data, _status_code, _headers = get_list_with_http_info(list_id, opts)
      data
    end

    # GET a List
    # Use this method to get details about a specific contact list (&#x60;list_id&#x60;).
    # @param list_id [String] The system generated ID that uniquely identifies a contact list.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include_membership_count Returns the total number of contacts per list that meet your selection criteria. Set the &#x60;include_membership_count&#x60; to &#x60;active&#x60;, to count only active contacts, or &#x60;all&#x60; to include all contacts in the count.
    # @return [Array<(GetList200Response, Integer, Hash)>] GetList200Response data, response status code and response headers
    def get_list_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactListsApi.get_list ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactListsApi.get_list"
      end
      allowable_values = ["all", "active"]
      if @api_client.config.client_side_validation && opts[:'include_membership_count'] && !allowable_values.include?(opts[:'include_membership_count'])
        fail ArgumentError, "invalid value for \"include_membership_count\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/contact_lists/{list_id}'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_membership_count'] = opts[:'include_membership_count'] if !opts[:'include_membership_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactListsApi.get_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactListsApi#get_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a collection of V2 and V3 API List IDs
    # <div class=\"Msg Msg--warning\"><p class=\"note-text\">Use this endpoint to migrate your locally stored V2 contact list data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.</p></div>  This GET call retrieves a collection of cross-referenced list sequence IDs (`id` used in the V2 API) and UUIDs (`list_id` used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the `sequence_ids` query parameter to specify a set of comma delimited V2 list ids to cross-reference. See [Migrating Apps and Data to V3](/api_guide/migration_overview.html) to learn more.\"
    # @param sequence_ids [String] Comma delimited list of V2 API list &#x60;ids&#x60; to cross-reference with the V3 API &#x60;list_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.
    # @param [Hash] opts the optional parameters
    # @return [GetListIdXrefs200Response]
    def get_list_id_xrefs(sequence_ids, opts = {})
      data, _status_code, _headers = get_list_id_xrefs_with_http_info(sequence_ids, opts)
      data
    end

    # GET a collection of V2 and V3 API List IDs
    # &lt;div class&#x3D;\&quot;Msg Msg--warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact list data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced list sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;list_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 list ids to cross-reference. See [Migrating Apps and Data to V3](/api_guide/migration_overview.html) to learn more.\&quot;
    # @param sequence_ids [String] Comma delimited list of V2 API list &#x60;ids&#x60; to cross-reference with the V3 API &#x60;list_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetListIdXrefs200Response, Integer, Hash)>] GetListIdXrefs200Response data, response status code and response headers
    def get_list_id_xrefs_with_http_info(sequence_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactListsApi.get_list_id_xrefs ...'
      end
      # verify the required parameter 'sequence_ids' is set
      if @api_client.config.client_side_validation && sequence_ids.nil?
        fail ArgumentError, "Missing the required parameter 'sequence_ids' when calling ContactListsApi.get_list_id_xrefs"
      end
      # resource path
      local_var_path = '/contact_lists/list_id_xrefs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sequence_ids'] = sequence_ids

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetListIdXrefs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactListsApi.get_list_id_xrefs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactListsApi#get_list_id_xrefs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PUT (update) a List
    # Updates an existing contact list resource, specified by `list_id`
    # @param list_id [String] Unique ID of the contact list to update
    # @param update_list_request [UpdateListRequest] JSON payload containing updates to the specified contact list
    # @param [Hash] opts the optional parameters
    # @return [UpdateList200Response]
    def update_list(list_id, update_list_request, opts = {})
      data, _status_code, _headers = update_list_with_http_info(list_id, update_list_request, opts)
      data
    end

    # PUT (update) a List
    # Updates an existing contact list resource, specified by &#x60;list_id&#x60;
    # @param list_id [String] Unique ID of the contact list to update
    # @param update_list_request [UpdateListRequest] JSON payload containing updates to the specified contact list
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateList200Response, Integer, Hash)>] UpdateList200Response data, response status code and response headers
    def update_list_with_http_info(list_id, update_list_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactListsApi.update_list ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactListsApi.update_list"
      end
      # verify the required parameter 'update_list_request' is set
      if @api_client.config.client_side_validation && update_list_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_list_request' when calling ContactListsApi.update_list"
      end
      # resource path
      local_var_path = '/contact_lists/{list_id}'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_list_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactListsApi.update_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactListsApi#update_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
