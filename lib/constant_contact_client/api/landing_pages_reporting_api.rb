=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.90
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module ConstantContactClient
  class LandingPagesReportingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # GET a Unique Contacts Adds Landing Page Report
    # Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by `contact_id`. The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
    # @return [GetContactAdds200Response]
    def get_contact_adds(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_contact_adds_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET a Unique Contacts Adds Landing Page Report
    # Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
    # @return [Array<(GetContactAdds200Response, Integer, Hash)>] GetContactAdds200Response data, response status code and response headers
    def get_contact_adds_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LandingPagesReportingApi.get_contact_adds ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling LandingPagesReportingApi.get_contact_adds"
      end
      # resource path
      local_var_path = '/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_adds'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'contacts_filter'] = opts[:'contacts_filter'] if !opts[:'contacts_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetContactAdds200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"LandingPagesReportingApi.get_contact_adds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LandingPagesReportingApi#get_contact_adds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a Contacts Opens Landing Page Report
    # Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
    # @return [GetUniqueContactOpens200Response]
    def get_contact_opens(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_contact_opens_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET a Contacts Opens Landing Page Report
    # Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
    # @return [Array<(GetUniqueContactOpens200Response, Integer, Hash)>] GetUniqueContactOpens200Response data, response status code and response headers
    def get_contact_opens_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LandingPagesReportingApi.get_contact_opens ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling LandingPagesReportingApi.get_contact_opens"
      end
      # resource path
      local_var_path = '/reports/landing_pages/campaign_details/{campaign_activity_id}/p_contact_opens'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'contacts_filter'] = opts[:'contacts_filter'] if !opts[:'contacts_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUniqueContactOpens200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"LandingPagesReportingApi.get_contact_opens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LandingPagesReportingApi#get_contact_opens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a Unique Contacts Clicks Landing Page Report
    # Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the `contact_id` and `url_id`. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
    # @return [GetUniqueContactClicks200Response]
    def get_unique_contact_clicks(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_unique_contact_clicks_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET a Unique Contacts Clicks Landing Page Report
    # Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
    # @return [Array<(GetUniqueContactClicks200Response, Integer, Hash)>] GetUniqueContactClicks200Response data, response status code and response headers
    def get_unique_contact_clicks_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LandingPagesReportingApi.get_unique_contact_clicks ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling LandingPagesReportingApi.get_unique_contact_clicks"
      end
      # resource path
      local_var_path = '/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_clicks'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'contacts_filter'] = opts[:'contacts_filter'] if !opts[:'contacts_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUniqueContactClicks200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"LandingPagesReportingApi.get_unique_contact_clicks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LandingPagesReportingApi#get_unique_contact_clicks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a Unique Contacts Opens Landing Page Report
    # Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
    # @return [GetUniqueContactOpens200Response]
    def get_unique_contact_opens(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_unique_contact_opens_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET a Unique Contacts Opens Landing Page Report
    # Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
    # @return [Array<(GetUniqueContactOpens200Response, Integer, Hash)>] GetUniqueContactOpens200Response data, response status code and response headers
    def get_unique_contact_opens_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LandingPagesReportingApi.get_unique_contact_opens ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling LandingPagesReportingApi.get_unique_contact_opens"
      end
      # resource path
      local_var_path = '/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_opens'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'contacts_filter'] = opts[:'contacts_filter'] if !opts[:'contacts_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUniqueContactOpens200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"LandingPagesReportingApi.get_unique_contact_opens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LandingPagesReportingApi#get_unique_contact_opens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a Unique Contacts SMS Opt-In Landing Page Report
    # Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by `contact_id``.  The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
    # @return [GetUniqueContactSMSOptIns200Response]
    def get_unique_contact_sms_opt_ins(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_unique_contact_sms_opt_ins_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET a Unique Contacts SMS Opt-In Landing Page Report
    # Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
    # @return [Array<(GetUniqueContactSMSOptIns200Response, Integer, Hash)>] GetUniqueContactSMSOptIns200Response data, response status code and response headers
    def get_unique_contact_sms_opt_ins_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LandingPagesReportingApi.get_unique_contact_sms_opt_ins ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling LandingPagesReportingApi.get_unique_contact_sms_opt_ins"
      end
      # resource path
      local_var_path = '/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_sms_optins'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'contacts_filter'] = opts[:'contacts_filter'] if !opts[:'contacts_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUniqueContactSMSOptIns200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"LandingPagesReportingApi.get_unique_contact_sms_opt_ins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LandingPagesReportingApi#get_unique_contact_sms_opt_ins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET a Unique Contacts Updates Landing Page Report
    # Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
    # @return [GetUniqueContactUpdates200Response]
    def get_unique_contact_updates(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_unique_contact_updates_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET a Unique Contacts Updates Landing Page Report
    # Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
    # @param campaign_activity_id [String] The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @option opts [String] :contacts_filter Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
    # @return [Array<(GetUniqueContactUpdates200Response, Integer, Hash)>] GetUniqueContactUpdates200Response data, response status code and response headers
    def get_unique_contact_updates_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LandingPagesReportingApi.get_unique_contact_updates ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling LandingPagesReportingApi.get_unique_contact_updates"
      end
      # resource path
      local_var_path = '/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_updates'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'contacts_filter'] = opts[:'contacts_filter'] if !opts[:'contacts_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUniqueContactUpdates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"LandingPagesReportingApi.get_unique_contact_updates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LandingPagesReportingApi#get_unique_contact_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
