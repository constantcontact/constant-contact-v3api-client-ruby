=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.90
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module ConstantContactClient
  class EmailSchedulingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # GET the HTML Preview of an Email Campaign Activity
    # Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (`format_type` 5) use the Constant Contact account owner's contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [GetEmailCampaignActivityPreview200Response]
    def get_email_campaign_activity_preview(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_email_campaign_activity_preview_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET the HTML Preview of an Email Campaign Activity
    # Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEmailCampaignActivityPreview200Response, Integer, Hash)>] GetEmailCampaignActivityPreview200Response data, response status code and response headers
    def get_email_campaign_activity_preview_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailSchedulingApi.get_email_campaign_activity_preview ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailSchedulingApi.get_email_campaign_activity_preview"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/previews'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailCampaignActivityPreview200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailSchedulingApi.get_email_campaign_activity_preview",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailSchedulingApi#get_email_campaign_activity_preview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Campaign Activity Schedule
    # Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in `SCHEDULED` status, this method returns an empty array and a 200 response code.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<GetEmailCampaignActivitySchedule200ResponseInner>]
    def get_email_campaign_activity_schedule(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_email_campaign_activity_schedule_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Campaign Activity Schedule
    # Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetEmailCampaignActivitySchedule200ResponseInner>, Integer, Hash)>] Array<GetEmailCampaignActivitySchedule200ResponseInner> data, response status code and response headers
    def get_email_campaign_activity_schedule_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailSchedulingApi.get_email_campaign_activity_schedule ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailSchedulingApi.get_email_campaign_activity_schedule"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/schedules'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetEmailCampaignActivitySchedule200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailSchedulingApi.get_email_campaign_activity_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailSchedulingApi#get_email_campaign_activity_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET the Send History of an Email Campaign Activity
    # Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.
    # @param [Hash] opts the optional parameters
    # @return [Array<GetEmailCampaignActivitySendHistory200ResponseInner>]
    def get_email_campaign_activity_send_history(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_email_campaign_activity_send_history_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET the Send History of an Email Campaign Activity
    # Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetEmailCampaignActivitySendHistory200ResponseInner>, Integer, Hash)>] Array<GetEmailCampaignActivitySendHistory200ResponseInner> data, response status code and response headers
    def get_email_campaign_activity_send_history_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailSchedulingApi.get_email_campaign_activity_send_history ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailSchedulingApi.get_email_campaign_activity_send_history"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/send_history'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetEmailCampaignActivitySendHistory200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailSchedulingApi.get_email_campaign_activity_send_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailSchedulingApi#get_email_campaign_activity_send_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # POST (Create) an Email Campaign Activity Schedule
    # Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the `scheduled_date` request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the `contact_list_ids` or `segment_ids` array to add contacts.  You can only schedule email campaign activities that have the `primary_email` role and are in `DRAFT`, `DONE`, or `ERROR` status. When you schedule an email campaign activity in `DONE` status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.
    # @param schedule_email_campaign_activity_request [ScheduleEmailCampaignActivityRequest] A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<GetEmailCampaignActivitySchedule200ResponseInner>]
    def schedule_email_campaign_activity(campaign_activity_id, schedule_email_campaign_activity_request, opts = {})
      data, _status_code, _headers = schedule_email_campaign_activity_with_http_info(campaign_activity_id, schedule_email_campaign_activity_request, opts)
      data
    end

    # POST (Create) an Email Campaign Activity Schedule
    # Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.
    # @param schedule_email_campaign_activity_request [ScheduleEmailCampaignActivityRequest] A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetEmailCampaignActivitySchedule200ResponseInner>, Integer, Hash)>] Array<GetEmailCampaignActivitySchedule200ResponseInner> data, response status code and response headers
    def schedule_email_campaign_activity_with_http_info(campaign_activity_id, schedule_email_campaign_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailSchedulingApi.schedule_email_campaign_activity ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailSchedulingApi.schedule_email_campaign_activity"
      end
      # verify the required parameter 'schedule_email_campaign_activity_request' is set
      if @api_client.config.client_side_validation && schedule_email_campaign_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_email_campaign_activity_request' when calling EmailSchedulingApi.schedule_email_campaign_activity"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/schedules'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(schedule_email_campaign_activity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetEmailCampaignActivitySchedule200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailSchedulingApi.schedule_email_campaign_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailSchedulingApi#schedule_email_campaign_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # POST Test Send an Email Campaign Activity
    # Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the `email_addresses` array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the `email_addresses` array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.
    # @param test_send_email_campaign_activity_request [TestSendEmailCampaignActivityRequest] A JSON request body that contains the recipients of the test email and an optional personal message.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_send_email_campaign_activity(campaign_activity_id, test_send_email_campaign_activity_request, opts = {})
      test_send_email_campaign_activity_with_http_info(campaign_activity_id, test_send_email_campaign_activity_request, opts)
      nil
    end

    # POST Test Send an Email Campaign Activity
    # Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
    # @param campaign_activity_id [String] The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.
    # @param test_send_email_campaign_activity_request [TestSendEmailCampaignActivityRequest] A JSON request body that contains the recipients of the test email and an optional personal message.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_send_email_campaign_activity_with_http_info(campaign_activity_id, test_send_email_campaign_activity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailSchedulingApi.test_send_email_campaign_activity ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailSchedulingApi.test_send_email_campaign_activity"
      end
      # verify the required parameter 'test_send_email_campaign_activity_request' is set
      if @api_client.config.client_side_validation && test_send_email_campaign_activity_request.nil?
        fail ArgumentError, "Missing the required parameter 'test_send_email_campaign_activity_request' when calling EmailSchedulingApi.test_send_email_campaign_activity"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/tests'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(test_send_email_campaign_activity_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailSchedulingApi.test_send_email_campaign_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailSchedulingApi#test_send_email_campaign_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DELETE an Email Campaign Activity Schedule
    # Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in `SCHEDULED` status. Unscheduling reverts the email campaign activity to the status prior to `SCHEDULED`.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unschedule_email_campaign_activity(campaign_activity_id, opts = {})
      unschedule_email_campaign_activity_with_http_info(campaign_activity_id, opts)
      nil
    end

    # DELETE an Email Campaign Activity Schedule
    # Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unschedule_email_campaign_activity_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailSchedulingApi.unschedule_email_campaign_activity ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailSchedulingApi.unschedule_email_campaign_activity"
      end
      # resource path
      local_var_path = '/emails/activities/{campaign_activity_id}/schedules'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailSchedulingApi.unschedule_email_campaign_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailSchedulingApi#unschedule_email_campaign_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
