=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.101
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module ConstantContactClient
  class ContactTagsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # DELETE a Tag
    # Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
    # @param tag_id [String] The ID that uniquely identifies a tag in UUID format.
    # @param [Hash] opts the optional parameters
    # @return [DeleteTag202Response]
    def delete_tag(tag_id, opts = {})
      data, _status_code, _headers = delete_tag_with_http_info(tag_id, opts)
      data
    end

    # DELETE a Tag
    # Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
    # @param tag_id [String] The ID that uniquely identifies a tag in UUID format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteTag202Response, Integer, Hash)>] DeleteTag202Response data, response status code and response headers
    def delete_tag_with_http_info(tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactTagsApi.delete_tag ...'
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling ContactTagsApi.delete_tag"
      end
      # resource path
      local_var_path = '/contact_tags/{tag_id}'.sub('{' + 'tag_id' + '}', CGI.escape(tag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteTag202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactTagsApi.delete_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactTagsApi#delete_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET Details for All Tags
    # Use this endpoint to get details for all tags in your account. Use the <code>include_count</code> query parameter to include the total number of contacts assigned each tag. Use the <code>limit</code> query parameter to limit the number of tag results returned per page. To get the next page of results, copy the <code>cursor={the cursor ID}</code> from the resulting href link and add it (<code>&</code>) to the URL. For example:  <p><code>/v3/contact_tags?limit=1&cursor=</code></p><p><code>bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ=</code></p> To learn more, see [Get Tags](/api_guide/tags_get.html).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (default to 50)
    # @option opts [Boolean] :include_count Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (default to false)
    # @return [GetAllTags200Response]
    def get_all_tags(opts = {})
      data, _status_code, _headers = get_all_tags_with_http_info(opts)
      data
    end

    # GET Details for All Tags
    # Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (default to 50)
    # @option opts [Boolean] :include_count Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (default to false)
    # @return [Array<(GetAllTags200Response, Integer, Hash)>] GetAllTags200Response data, response status code and response headers
    def get_all_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactTagsApi.get_all_tags ...'
      end
      # resource path
      local_var_path = '/contact_tags'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_count'] = opts[:'include_count'] if !opts[:'include_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAllTags200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactTagsApi.get_all_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactTagsApi#get_all_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET Tag Details
    # Use this method to get tag details for a specified `tag_id`. Use the `include_count` query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag's Details](/api_guide/tags_get_single.html).
    # @param tag_id [String] The ID that uniquely identifies a tag (UUID format).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_count Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (default to false)
    # @return [GetTag200Response]
    def get_tag(tag_id, opts = {})
      data, _status_code, _headers = get_tag_with_http_info(tag_id, opts)
      data
    end

    # GET Tag Details
    # Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
    # @param tag_id [String] The ID that uniquely identifies a tag (UUID format).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_count Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (default to false)
    # @return [Array<(GetTag200Response, Integer, Hash)>] GetTag200Response data, response status code and response headers
    def get_tag_with_http_info(tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactTagsApi.get_tag ...'
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling ContactTagsApi.get_tag"
      end
      # resource path
      local_var_path = '/contact_tags/{tag_id}'.sub('{' + 'tag_id' + '}', CGI.escape(tag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_count'] = opts[:'include_count'] if !opts[:'include_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTag200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactTagsApi.get_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactTagsApi#get_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # POST (Create) a Tag
    # Use this method to create a new tag. The tag `name` is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (`tag_source`) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
    # @param post_tag_request [PostTagRequest] The JSON payload to use to create a new tag.
    # @param [Hash] opts the optional parameters
    # @return [GetTag200Response]
    def post_tag(post_tag_request, opts = {})
      data, _status_code, _headers = post_tag_with_http_info(post_tag_request, opts)
      data
    end

    # POST (Create) a Tag
    # Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
    # @param post_tag_request [PostTagRequest] The JSON payload to use to create a new tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTag200Response, Integer, Hash)>] GetTag200Response data, response status code and response headers
    def post_tag_with_http_info(post_tag_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactTagsApi.post_tag ...'
      end
      # verify the required parameter 'post_tag_request' is set
      if @api_client.config.client_side_validation && post_tag_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_tag_request' when calling ContactTagsApi.post_tag"
      end
      # resource path
      local_var_path = '/contact_tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_tag_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetTag200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactTagsApi.post_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactTagsApi#post_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PUT (Update) a Tag
    # Use this method to rename an existing tag to a new unique tag name (`name`). The maximum length is 255 characters. The `tag_source` value cannot be updated using this method. You can set the `tag_source` value using the `POST contact_tags method`. [Learn more](/api_guide/tags_update.html)
    # @param tag_id [String] The system generated ID used to uniquely identify the tag that you want to rename (UUID format).
    # @param put_tag_request [PutTagRequest] The JSON payload used to update the tag name (&#x60;name&#x60;).
    # @param [Hash] opts the optional parameters
    # @return [GetTag200Response]
    def put_tag(tag_id, put_tag_request, opts = {})
      data, _status_code, _headers = put_tag_with_http_info(tag_id, put_tag_request, opts)
      data
    end

    # PUT (Update) a Tag
    # Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
    # @param tag_id [String] The system generated ID used to uniquely identify the tag that you want to rename (UUID format).
    # @param put_tag_request [PutTagRequest] The JSON payload used to update the tag name (&#x60;name&#x60;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTag200Response, Integer, Hash)>] GetTag200Response data, response status code and response headers
    def put_tag_with_http_info(tag_id, put_tag_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactTagsApi.put_tag ...'
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling ContactTagsApi.put_tag"
      end
      # verify the required parameter 'put_tag_request' is set
      if @api_client.config.client_side_validation && put_tag_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_tag_request' when calling ContactTagsApi.put_tag"
      end
      # resource path
      local_var_path = '/contact_tags/{tag_id}'.sub('{' + 'tag_id' + '}', CGI.escape(tag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_tag_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetTag200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"ContactTagsApi.put_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactTagsApi#put_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
