=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.109
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module ConstantContactClient
  class EmailReportingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # GET an Email Bounces Report
    # Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact's email address, unique ID, and the email bounce date and time. Use the <code>bounce_code</code> query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;.
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [GetBouncesReport200Response]
    def get_bounces_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_bounces_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Bounces Report
    # Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;.
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [Array<(GetBouncesReport200Response, Integer, Hash)>] GetBouncesReport200Response data, response status code and response headers
    def get_bounces_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_bounces_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_bounces_report"
      end
      allowable_values = ["B", "D", "F", "S", "V", "X", "Z"]
      if @api_client.config.client_side_validation && opts[:'bounce_code'] && !opts[:'bounce_code'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"bounce_code\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/tracking/bounces'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'bounce_code'] = @api_client.build_collection_param(opts[:'bounce_code'], :multi) if !opts[:'bounce_code'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBouncesReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_bounces_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_bounces_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Links Report
    # Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the `no_clicks` query parameter to `true`.  You can return reporting data for `primary_email` and `resend` role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (default to false)
    # @return [GetCampaignActivityLinkReport200Response]
    def get_campaign_activity_link_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_campaign_activity_link_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Links Report
    # Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (default to false)
    # @return [Array<(GetCampaignActivityLinkReport200Response, Integer, Hash)>] GetCampaignActivityLinkReport200Response data, response status code and response headers
    def get_campaign_activity_link_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_campaign_activity_link_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_campaign_activity_link_report"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/links'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'no_clicks'] = opts[:'no_clicks'] if !opts[:'no_clicks'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCampaignActivityLinkReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_campaign_activity_link_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_campaign_activity_link_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Clicks Report
    # Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the `url_id` query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report.
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [GetClicksReport200Response]
    def get_clicks_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_clicks_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Clicks Report
    # Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report.
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [Array<(GetClicksReport200Response, Integer, Hash)>] GetClicksReport200Response data, response status code and response headers
    def get_clicks_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_clicks_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_clicks_report"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/tracking/clicks'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url_id'] = opts[:'url_id'] if !opts[:'url_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClicksReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_clicks_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_clicks_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Did Not Opens Report
    # Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact's email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [GetDidNotOpensReport200Response]
    def get_did_not_opens_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_did_not_opens_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Did Not Opens Report
    # Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [Array<(GetDidNotOpensReport200Response, Integer, Hash)>] GetDidNotOpensReport200Response data, response status code and response headers
    def get_did_not_opens_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_did_not_opens_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_did_not_opens_report"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/tracking/didnotopens'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDidNotOpensReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_did_not_opens_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_did_not_opens_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Campaign Activity Stats Report
    # Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each `campaign_activity_id`, this method returns the `campaign_id`, the total counts (`stats`) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (`last_refresh_time`) the `stats`.  When requesting statistics for multiple email campaign activities, if one or more of the `campaign_activity_ids` do not exist, were deleted, or do not have any stats associated with it, the `campaign_activity_ids` and error details display under `errors`. If any single specified `campaign_activity_id` is invalid (malformed), a 404 error response is returned for all campaign activities.
    # @param campaign_activity_ids [String] A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).
    # @param [Hash] opts the optional parameters
    # @return [GetEmailCampaignActivityReport200Response]
    def get_email_campaign_activity_report(campaign_activity_ids, opts = {})
      data, _status_code, _headers = get_email_campaign_activity_report_with_http_info(campaign_activity_ids, opts)
      data
    end

    # GET an Email Campaign Activity Stats Report
    # Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
    # @param campaign_activity_ids [String] A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEmailCampaignActivityReport200Response, Integer, Hash)>] GetEmailCampaignActivityReport200Response data, response status code and response headers
    def get_email_campaign_activity_report_with_http_info(campaign_activity_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_email_campaign_activity_report ...'
      end
      # verify the required parameter 'campaign_activity_ids' is set
      if @api_client.config.client_side_validation && campaign_activity_ids.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_ids' when calling EmailReportingApi.get_email_campaign_activity_report"
      end
      # resource path
      local_var_path = '/reports/stats/email_campaign_activities/{campaign_activity_ids}'.sub('{' + 'campaign_activity_ids' + '}', CGI.escape(campaign_activity_ids.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailCampaignActivityReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_email_campaign_activity_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_email_campaign_activity_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Campaigns Summary Report
    # Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (<code>last_sent_date</code>). Use the <code>limit</code> query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \"[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\"
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @return [GetEmailCampaignReport200Response]
    def get_email_campaign_report(opts = {})
      data, _status_code, _headers = get_email_campaign_report_with_http_info(opts)
      data
    end

    # GET an Email Campaigns Summary Report
    # Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (default to '50')
    # @return [Array<(GetEmailCampaignReport200Response, Integer, Hash)>] GetEmailCampaignReport200Response data, response status code and response headers
    def get_email_campaign_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_email_campaign_report ...'
      end
      # resource path
      local_var_path = '/reports/summary_reports/email_campaign_summaries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailCampaignReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_email_campaign_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_email_campaign_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Opens Report
    # Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact's email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [GetEmailOpensReport200Response]
    def get_email_opens_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_email_opens_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Opens Report
    # Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [Array<(GetEmailOpensReport200Response, Integer, Hash)>] GetEmailOpensReport200Response data, response status code and response headers
    def get_email_opens_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_email_opens_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_email_opens_report"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/tracking/opens'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailOpensReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_email_opens_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_email_opens_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Sends Report
    # Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact's email address, the contact's first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [GetEmailSendsReport200Response]
    def get_email_sends_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_email_sends_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Sends Report
    # Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
    # @param campaign_activity_id [String] The unique ID for an email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [Array<(GetEmailSendsReport200Response, Integer, Hash)>] GetEmailSendsReport200Response data, response status code and response headers
    def get_email_sends_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_email_sends_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_email_sends_report"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/tracking/sends'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailSendsReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_email_sends_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_email_sends_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Campaign Stats Report
    # Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each `campaign_id`, this method returns lists that include total counts (`stats`) for each type of tracked email and relevant campaign-related percentages (`percents`). It also returns the date and time at which the campaign stats were last refreshed. If any specified `campaign_id` is invalid, a 404 error response is returned for all campaigns.
    # @param campaign_ids [String] A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).
    # @param [Hash] opts the optional parameters
    # @return [GetEmailStatsReport200Response]
    def get_email_stats_report(campaign_ids, opts = {})
      data, _status_code, _headers = get_email_stats_report_with_http_info(campaign_ids, opts)
      data
    end

    # GET an Email Campaign Stats Report
    # Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
    # @param campaign_ids [String] A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEmailStatsReport200Response, Integer, Hash)>] GetEmailStatsReport200Response data, response status code and response headers
    def get_email_stats_report_with_http_info(campaign_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_email_stats_report ...'
      end
      # verify the required parameter 'campaign_ids' is set
      if @api_client.config.client_side_validation && campaign_ids.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_ids' when calling EmailReportingApi.get_email_stats_report"
      end
      # resource path
      local_var_path = '/reports/stats/email_campaigns/{campaign_ids}'.sub('{' + 'campaign_ids' + '}', CGI.escape(campaign_ids.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailStatsReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_email_stats_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_email_stats_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Forwards Report
    # Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact's email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [GetForwardsReport200Response]
    def get_forwards_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_forwards_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Forwards Report
    # Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [Array<(GetForwardsReport200Response, Integer, Hash)>] GetForwardsReport200Response data, response status code and response headers
    def get_forwards_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_forwards_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_forwards_report"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/tracking/forwards'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetForwardsReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_forwards_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_forwards_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Opt-outs Report
    # Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact's email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [GetOptoutsReport200Response]
    def get_optouts_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_optouts_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Opt-outs Report
    # Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [Array<(GetOptoutsReport200Response, Integer, Hash)>] GetOptoutsReport200Response data, response status code and response headers
    def get_optouts_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_optouts_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_optouts_report"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/tracking/optouts'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOptoutsReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_optouts_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_optouts_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET an Email Unique Opens Report
    # Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact's email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [GetEmailOpensReport200Response]
    def get_unique_opens_report(campaign_activity_id, opts = {})
      data, _status_code, _headers = get_unique_opens_report_with_http_info(campaign_activity_id, opts)
      data
    end

    # GET an Email Unique Opens Report
    # Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
    # @param campaign_activity_id [String] The ID that uniquely identifies the email campaign activity to use for this report.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The number of tracking activities to return on a page. (default to '500')
    # @return [Array<(GetEmailOpensReport200Response, Integer, Hash)>] GetEmailOpensReport200Response data, response status code and response headers
    def get_unique_opens_report_with_http_info(campaign_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailReportingApi.get_unique_opens_report ...'
      end
      # verify the required parameter 'campaign_activity_id' is set
      if @api_client.config.client_side_validation && campaign_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_activity_id' when calling EmailReportingApi.get_unique_opens_report"
      end
      # resource path
      local_var_path = '/reports/email_reports/{campaign_activity_id}/tracking/unique_opens'.sub('{' + 'campaign_activity_id' + '}', CGI.escape(campaign_activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEmailOpensReport200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2_access_code', 'oauth2_implicit']

      new_options = opts.merge(
        :operation => :"EmailReportingApi.get_unique_opens_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailReportingApi#get_unique_opens_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
