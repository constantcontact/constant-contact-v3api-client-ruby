=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.101
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module ConstantContactClient
  class CreateImportJSONActivityRequestImportDataInner
    # The email address of the contact. This method identifies each unique contact using their email address.
    attr_accessor :email

    # The first name of the contact.
    attr_accessor :first_name

    # The last name of the contact.
    attr_accessor :last_name

    # The job title of the contact.
    attr_accessor :job_title

    # The name of the company where the contact works.
    attr_accessor :company_name

    # The month value for the contact's birthday. Valid values are from 1 through 12. The <code>birthday_month</code> property is required if you use <code>birthday_day</code>.
    attr_accessor :birthday_month

    # The day value for the contact's birthday. Valid values are from 1 through 31. The <code>birthday_day</code> property is required if you use <code>birthday_month</code>.
    attr_accessor :birthday_day

    # The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.
    attr_accessor :anniversary

    # The primary phone number for the contact. Use this field to add the default kind of phone number to the imported contact's phone number. Default <code>kind</code> is <code>other</code>.
    attr_accessor :phone

    # The home phone number for the contact.
    attr_accessor :home_phone

    # The work phone number for the contact.
    attr_accessor :work_phone

    # The mobile phone number for the contact.
    attr_accessor :mobile_phone

    # A phone number for the contact.
    attr_accessor :other_phone

    # Line one of the primary street address for the contact. Use this field to add the default kind of street to the imported contact's street address. The default <code>kind</code> is <code>home</code>. which maps to the <code>street_addresses</code> array` in the response.
    attr_accessor :street

    # Line two of the primary street address for the contact. This value is automatically appended to the <code>street</code> value. Use this field to add the default kind for line two of the street address to the imported contact's address. The default <code>kind</code> is <code>other</code>.
    attr_accessor :street2

    # The name of the primary city for the contact. Use this field to add the default kind of city to the imported contact's home address. The default <code>kind</code> is <code>home</code>.
    attr_accessor :city

    # The name of the primary state or province for the contact. Use this field to add the default kind of state to the imported contact's home address. The default <code>kind</code> is <code>home</code>.
    attr_accessor :state

    # The zip or postal code associated with the contact's primary address. Use this field to add the default kind of zip to the imported contact's street address. The default <code>kind</code> is <code>home</code>.
    attr_accessor :zip

    # The name of the primary country where the contact is located. Use this field to add the default kind of country to the imported contact's street address. The default <code>kind</code> is <code>home</code>.
    attr_accessor :country

    # Line one of the home street address for the contact.
    attr_accessor :home_street

    # Line two of the home street address for the contact. This value is automatically appended to the <code>home_street</code> value.
    attr_accessor :home_street2

    # The name of the city where the contact lives.
    attr_accessor :home_city

    # The name of the home state or province where the contact lives.
    attr_accessor :home_state

    # The zip or postal code associated with the contact's home address.
    attr_accessor :home_zip

    # The name of the country where the contact lives.
    attr_accessor :home_country

    # Line one of the work street address for the contact.
    attr_accessor :work_street

    # Line two of the work street address for the contact. This value is automatically appended to the <code>work_street</code> value.
    attr_accessor :work_street2

    # The name of the city where the contact works.
    attr_accessor :work_city

    # The name of the state or province where the contact works.
    attr_accessor :work_state

    # The zip or postal code associated with the contact's work address.
    attr_accessor :work_zip

    # The name of the country where the contact works.
    attr_accessor :work_country

    # Line one of the other street address for the contact.
    attr_accessor :other_street

    # Line two of the other street address for the contact. This value is automatically appended to the <code>other_street</code> value.
    attr_accessor :other_street2

    # The name of another city where the contact is located.
    attr_accessor :other_city

    # The name of another state or province where the contact is located.
    attr_accessor :other_state

    # The zip or postal code associated with the contact's other address.
    attr_accessor :other_zip

    # The name of another country where the contact is located.
    attr_accessor :other_country

    # The name of this property is dynamic based on the custom fields you want to import. Use a key-value pair where the key is an existing custom field name prefixed with <code>cf:</code>, and the value is a custom field string value. For example, if you have a custom field named <code>first_name</code> you can use <code>\"cf:first_name\":\"Joe\"</code>. Each contact can contain up to 25 different custom fields.
    attr_accessor :cfcustom_field_name

    # The US phone number to associate with the contact's SMS-enabled phone. The country code must be valid. Valid formats are <code>1231231234</code> or <code>123-123-1234</code>.
    attr_accessor :sms_number

    # Required if the SMS permission is set to `explict`. The date that the contact consented to receiving SMS messages. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY .
    attr_accessor :sms_consent_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'email' => :'email',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'job_title' => :'job_title',
        :'company_name' => :'company_name',
        :'birthday_month' => :'birthday_month',
        :'birthday_day' => :'birthday_day',
        :'anniversary' => :'anniversary',
        :'phone' => :'phone',
        :'home_phone' => :'home_phone',
        :'work_phone' => :'work_phone',
        :'mobile_phone' => :'mobile_phone',
        :'other_phone' => :'other_phone',
        :'street' => :'street',
        :'street2' => :'street2',
        :'city' => :'city',
        :'state' => :'state',
        :'zip' => :'zip',
        :'country' => :'country',
        :'home_street' => :'home_street',
        :'home_street2' => :'home_street2',
        :'home_city' => :'home_city',
        :'home_state' => :'home_state',
        :'home_zip' => :'home_zip',
        :'home_country' => :'home country',
        :'work_street' => :'work_street',
        :'work_street2' => :'work_street2',
        :'work_city' => :'work_city',
        :'work_state' => :'work_state',
        :'work_zip' => :'work_zip',
        :'work_country' => :'work_country',
        :'other_street' => :'other_street',
        :'other_street2' => :'other_street2',
        :'other_city' => :'other_city',
        :'other_state' => :'other_state',
        :'other_zip' => :'other_zip',
        :'other_country' => :'other_country',
        :'cfcustom_field_name' => :'cf:custom_field_name',
        :'sms_number' => :'sms_number',
        :'sms_consent_date' => :'sms_consent_date'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'email' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'job_title' => :'String',
        :'company_name' => :'String',
        :'birthday_month' => :'Integer',
        :'birthday_day' => :'Integer',
        :'anniversary' => :'String',
        :'phone' => :'String',
        :'home_phone' => :'String',
        :'work_phone' => :'String',
        :'mobile_phone' => :'String',
        :'other_phone' => :'String',
        :'street' => :'String',
        :'street2' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'zip' => :'String',
        :'country' => :'String',
        :'home_street' => :'String',
        :'home_street2' => :'String',
        :'home_city' => :'String',
        :'home_state' => :'String',
        :'home_zip' => :'String',
        :'home_country' => :'String',
        :'work_street' => :'String',
        :'work_street2' => :'String',
        :'work_city' => :'String',
        :'work_state' => :'String',
        :'work_zip' => :'String',
        :'work_country' => :'String',
        :'other_street' => :'String',
        :'other_street2' => :'String',
        :'other_city' => :'String',
        :'other_state' => :'String',
        :'other_zip' => :'String',
        :'other_country' => :'String',
        :'cfcustom_field_name' => :'String',
        :'sms_number' => :'String',
        :'sms_consent_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConstantContactClient::CreateImportJSONActivityRequestImportDataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConstantContactClient::CreateImportJSONActivityRequestImportDataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      else
        self.email = nil
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'job_title')
        self.job_title = attributes[:'job_title']
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      end

      if attributes.key?(:'birthday_month')
        self.birthday_month = attributes[:'birthday_month']
      end

      if attributes.key?(:'birthday_day')
        self.birthday_day = attributes[:'birthday_day']
      end

      if attributes.key?(:'anniversary')
        self.anniversary = attributes[:'anniversary']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'home_phone')
        self.home_phone = attributes[:'home_phone']
      end

      if attributes.key?(:'work_phone')
        self.work_phone = attributes[:'work_phone']
      end

      if attributes.key?(:'mobile_phone')
        self.mobile_phone = attributes[:'mobile_phone']
      end

      if attributes.key?(:'other_phone')
        self.other_phone = attributes[:'other_phone']
      end

      if attributes.key?(:'street')
        self.street = attributes[:'street']
      end

      if attributes.key?(:'street2')
        self.street2 = attributes[:'street2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'home_street')
        self.home_street = attributes[:'home_street']
      end

      if attributes.key?(:'home_street2')
        self.home_street2 = attributes[:'home_street2']
      end

      if attributes.key?(:'home_city')
        self.home_city = attributes[:'home_city']
      end

      if attributes.key?(:'home_state')
        self.home_state = attributes[:'home_state']
      end

      if attributes.key?(:'home_zip')
        self.home_zip = attributes[:'home_zip']
      end

      if attributes.key?(:'home_country')
        self.home_country = attributes[:'home_country']
      end

      if attributes.key?(:'work_street')
        self.work_street = attributes[:'work_street']
      end

      if attributes.key?(:'work_street2')
        self.work_street2 = attributes[:'work_street2']
      end

      if attributes.key?(:'work_city')
        self.work_city = attributes[:'work_city']
      end

      if attributes.key?(:'work_state')
        self.work_state = attributes[:'work_state']
      end

      if attributes.key?(:'work_zip')
        self.work_zip = attributes[:'work_zip']
      end

      if attributes.key?(:'work_country')
        self.work_country = attributes[:'work_country']
      end

      if attributes.key?(:'other_street')
        self.other_street = attributes[:'other_street']
      end

      if attributes.key?(:'other_street2')
        self.other_street2 = attributes[:'other_street2']
      end

      if attributes.key?(:'other_city')
        self.other_city = attributes[:'other_city']
      end

      if attributes.key?(:'other_state')
        self.other_state = attributes[:'other_state']
      end

      if attributes.key?(:'other_zip')
        self.other_zip = attributes[:'other_zip']
      end

      if attributes.key?(:'other_country')
        self.other_country = attributes[:'other_country']
      end

      if attributes.key?(:'cfcustom_field_name')
        self.cfcustom_field_name = attributes[:'cfcustom_field_name']
      end

      if attributes.key?(:'sms_number')
        self.sms_number = attributes[:'sms_number']
      end

      if attributes.key?(:'sms_consent_date')
        self.sms_consent_date = attributes[:'sms_consent_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @email.to_s.length > 50
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 50.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 50
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 50.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 50
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 50.')
      end

      if !@job_title.nil? && @job_title.to_s.length > 50
        invalid_properties.push('invalid value for "job_title", the character length must be smaller than or equal to 50.')
      end

      if !@company_name.nil? && @company_name.to_s.length > 50
        invalid_properties.push('invalid value for "company_name", the character length must be smaller than or equal to 50.')
      end

      if !@phone.nil? && @phone.to_s.length > 50
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 50.')
      end

      if !@home_phone.nil? && @home_phone.to_s.length > 50
        invalid_properties.push('invalid value for "home_phone", the character length must be smaller than or equal to 50.')
      end

      if !@work_phone.nil? && @work_phone.to_s.length > 50
        invalid_properties.push('invalid value for "work_phone", the character length must be smaller than or equal to 50.')
      end

      if !@mobile_phone.nil? && @mobile_phone.to_s.length > 50
        invalid_properties.push('invalid value for "mobile_phone", the character length must be smaller than or equal to 50.')
      end

      if !@other_phone.nil? && @other_phone.to_s.length > 50
        invalid_properties.push('invalid value for "other_phone", the character length must be smaller than or equal to 50.')
      end

      if !@street.nil? && @street.to_s.length > 255
        invalid_properties.push('invalid value for "street", the character length must be smaller than or equal to 255.')
      end

      if !@street2.nil? && @street2.to_s.length > 255
        invalid_properties.push('invalid value for "street2", the character length must be smaller than or equal to 255.')
      end

      if !@city.nil? && @city.to_s.length > 50
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 50.')
      end

      if !@state.nil? && @state.to_s.length > 50
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 50.')
      end

      if !@zip.nil? && @zip.to_s.length > 50
        invalid_properties.push('invalid value for "zip", the character length must be smaller than or equal to 50.')
      end

      if !@country.nil? && @country.to_s.length > 50
        invalid_properties.push('invalid value for "country", the character length must be smaller than or equal to 50.')
      end

      if !@home_street.nil? && @home_street.to_s.length > 255
        invalid_properties.push('invalid value for "home_street", the character length must be smaller than or equal to 255.')
      end

      if !@home_street2.nil? && @home_street2.to_s.length > 255
        invalid_properties.push('invalid value for "home_street2", the character length must be smaller than or equal to 255.')
      end

      if !@home_city.nil? && @home_city.to_s.length > 50
        invalid_properties.push('invalid value for "home_city", the character length must be smaller than or equal to 50.')
      end

      if !@home_state.nil? && @home_state.to_s.length > 50
        invalid_properties.push('invalid value for "home_state", the character length must be smaller than or equal to 50.')
      end

      if !@home_zip.nil? && @home_zip.to_s.length > 50
        invalid_properties.push('invalid value for "home_zip", the character length must be smaller than or equal to 50.')
      end

      if !@home_country.nil? && @home_country.to_s.length > 50
        invalid_properties.push('invalid value for "home_country", the character length must be smaller than or equal to 50.')
      end

      if !@work_street.nil? && @work_street.to_s.length > 255
        invalid_properties.push('invalid value for "work_street", the character length must be smaller than or equal to 255.')
      end

      if !@work_street2.nil? && @work_street2.to_s.length > 255
        invalid_properties.push('invalid value for "work_street2", the character length must be smaller than or equal to 255.')
      end

      if !@work_city.nil? && @work_city.to_s.length > 50
        invalid_properties.push('invalid value for "work_city", the character length must be smaller than or equal to 50.')
      end

      if !@work_state.nil? && @work_state.to_s.length > 50
        invalid_properties.push('invalid value for "work_state", the character length must be smaller than or equal to 50.')
      end

      if !@work_zip.nil? && @work_zip.to_s.length > 50
        invalid_properties.push('invalid value for "work_zip", the character length must be smaller than or equal to 50.')
      end

      if !@work_country.nil? && @work_country.to_s.length > 50
        invalid_properties.push('invalid value for "work_country", the character length must be smaller than or equal to 50.')
      end

      if !@other_street.nil? && @other_street.to_s.length > 255
        invalid_properties.push('invalid value for "other_street", the character length must be smaller than or equal to 255.')
      end

      if !@other_street2.nil? && @other_street2.to_s.length > 255
        invalid_properties.push('invalid value for "other_street2", the character length must be smaller than or equal to 255.')
      end

      if !@other_city.nil? && @other_city.to_s.length > 50
        invalid_properties.push('invalid value for "other_city", the character length must be smaller than or equal to 50.')
      end

      if !@other_state.nil? && @other_state.to_s.length > 50
        invalid_properties.push('invalid value for "other_state", the character length must be smaller than or equal to 50.')
      end

      if !@other_zip.nil? && @other_zip.to_s.length > 50
        invalid_properties.push('invalid value for "other_zip", the character length must be smaller than or equal to 50.')
      end

      if !@other_country.nil? && @other_country.to_s.length > 50
        invalid_properties.push('invalid value for "other_country", the character length must be smaller than or equal to 50.')
      end

      if !@cfcustom_field_name.nil? && @cfcustom_field_name.to_s.length > 255
        invalid_properties.push('invalid value for "cfcustom_field_name", the character length must be smaller than or equal to 255.')
      end

      if !@sms_number.nil? && @sms_number.to_s.length > 16
        invalid_properties.push('invalid value for "sms_number", the character length must be smaller than or equal to 16.')
      end

      if !@sms_consent_date.nil? && @sms_consent_date.to_s.length > 16
        invalid_properties.push('invalid value for "sms_consent_date", the character length must be smaller than or equal to 16.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @email.nil?
      return false if @email.to_s.length > 50
      return false if !@first_name.nil? && @first_name.to_s.length > 50
      return false if !@last_name.nil? && @last_name.to_s.length > 50
      return false if !@job_title.nil? && @job_title.to_s.length > 50
      return false if !@company_name.nil? && @company_name.to_s.length > 50
      return false if !@phone.nil? && @phone.to_s.length > 50
      return false if !@home_phone.nil? && @home_phone.to_s.length > 50
      return false if !@work_phone.nil? && @work_phone.to_s.length > 50
      return false if !@mobile_phone.nil? && @mobile_phone.to_s.length > 50
      return false if !@other_phone.nil? && @other_phone.to_s.length > 50
      return false if !@street.nil? && @street.to_s.length > 255
      return false if !@street2.nil? && @street2.to_s.length > 255
      return false if !@city.nil? && @city.to_s.length > 50
      return false if !@state.nil? && @state.to_s.length > 50
      return false if !@zip.nil? && @zip.to_s.length > 50
      return false if !@country.nil? && @country.to_s.length > 50
      return false if !@home_street.nil? && @home_street.to_s.length > 255
      return false if !@home_street2.nil? && @home_street2.to_s.length > 255
      return false if !@home_city.nil? && @home_city.to_s.length > 50
      return false if !@home_state.nil? && @home_state.to_s.length > 50
      return false if !@home_zip.nil? && @home_zip.to_s.length > 50
      return false if !@home_country.nil? && @home_country.to_s.length > 50
      return false if !@work_street.nil? && @work_street.to_s.length > 255
      return false if !@work_street2.nil? && @work_street2.to_s.length > 255
      return false if !@work_city.nil? && @work_city.to_s.length > 50
      return false if !@work_state.nil? && @work_state.to_s.length > 50
      return false if !@work_zip.nil? && @work_zip.to_s.length > 50
      return false if !@work_country.nil? && @work_country.to_s.length > 50
      return false if !@other_street.nil? && @other_street.to_s.length > 255
      return false if !@other_street2.nil? && @other_street2.to_s.length > 255
      return false if !@other_city.nil? && @other_city.to_s.length > 50
      return false if !@other_state.nil? && @other_state.to_s.length > 50
      return false if !@other_zip.nil? && @other_zip.to_s.length > 50
      return false if !@other_country.nil? && @other_country.to_s.length > 50
      return false if !@cfcustom_field_name.nil? && @cfcustom_field_name.to_s.length > 255
      return false if !@sms_number.nil? && @sms_number.to_s.length > 16
      return false if !@sms_consent_date.nil? && @sms_consent_date.to_s.length > 16
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length > 50
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 50.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if first_name.nil?
        fail ArgumentError, 'first_name cannot be nil'
      end

      if first_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 50.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, 'last_name cannot be nil'
      end

      if last_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 50.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] job_title Value to be assigned
    def job_title=(job_title)
      if job_title.nil?
        fail ArgumentError, 'job_title cannot be nil'
      end

      if job_title.to_s.length > 50
        fail ArgumentError, 'invalid value for "job_title", the character length must be smaller than or equal to 50.'
      end

      @job_title = job_title
    end

    # Custom attribute writer method with validation
    # @param [Object] company_name Value to be assigned
    def company_name=(company_name)
      if company_name.nil?
        fail ArgumentError, 'company_name cannot be nil'
      end

      if company_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "company_name", the character length must be smaller than or equal to 50.'
      end

      @company_name = company_name
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if phone.nil?
        fail ArgumentError, 'phone cannot be nil'
      end

      if phone.to_s.length > 50
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 50.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] home_phone Value to be assigned
    def home_phone=(home_phone)
      if home_phone.nil?
        fail ArgumentError, 'home_phone cannot be nil'
      end

      if home_phone.to_s.length > 50
        fail ArgumentError, 'invalid value for "home_phone", the character length must be smaller than or equal to 50.'
      end

      @home_phone = home_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] work_phone Value to be assigned
    def work_phone=(work_phone)
      if work_phone.nil?
        fail ArgumentError, 'work_phone cannot be nil'
      end

      if work_phone.to_s.length > 50
        fail ArgumentError, 'invalid value for "work_phone", the character length must be smaller than or equal to 50.'
      end

      @work_phone = work_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_phone Value to be assigned
    def mobile_phone=(mobile_phone)
      if mobile_phone.nil?
        fail ArgumentError, 'mobile_phone cannot be nil'
      end

      if mobile_phone.to_s.length > 50
        fail ArgumentError, 'invalid value for "mobile_phone", the character length must be smaller than or equal to 50.'
      end

      @mobile_phone = mobile_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] other_phone Value to be assigned
    def other_phone=(other_phone)
      if other_phone.nil?
        fail ArgumentError, 'other_phone cannot be nil'
      end

      if other_phone.to_s.length > 50
        fail ArgumentError, 'invalid value for "other_phone", the character length must be smaller than or equal to 50.'
      end

      @other_phone = other_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] street Value to be assigned
    def street=(street)
      if street.nil?
        fail ArgumentError, 'street cannot be nil'
      end

      if street.to_s.length > 255
        fail ArgumentError, 'invalid value for "street", the character length must be smaller than or equal to 255.'
      end

      @street = street
    end

    # Custom attribute writer method with validation
    # @param [Object] street2 Value to be assigned
    def street2=(street2)
      if street2.nil?
        fail ArgumentError, 'street2 cannot be nil'
      end

      if street2.to_s.length > 255
        fail ArgumentError, 'invalid value for "street2", the character length must be smaller than or equal to 255.'
      end

      @street2 = street2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if city.nil?
        fail ArgumentError, 'city cannot be nil'
      end

      if city.to_s.length > 50
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 50.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.nil?
        fail ArgumentError, 'state cannot be nil'
      end

      if state.to_s.length > 50
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 50.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] zip Value to be assigned
    def zip=(zip)
      if zip.nil?
        fail ArgumentError, 'zip cannot be nil'
      end

      if zip.to_s.length > 50
        fail ArgumentError, 'invalid value for "zip", the character length must be smaller than or equal to 50.'
      end

      @zip = zip
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.nil?
        fail ArgumentError, 'country cannot be nil'
      end

      if country.to_s.length > 50
        fail ArgumentError, 'invalid value for "country", the character length must be smaller than or equal to 50.'
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] home_street Value to be assigned
    def home_street=(home_street)
      if home_street.nil?
        fail ArgumentError, 'home_street cannot be nil'
      end

      if home_street.to_s.length > 255
        fail ArgumentError, 'invalid value for "home_street", the character length must be smaller than or equal to 255.'
      end

      @home_street = home_street
    end

    # Custom attribute writer method with validation
    # @param [Object] home_street2 Value to be assigned
    def home_street2=(home_street2)
      if home_street2.nil?
        fail ArgumentError, 'home_street2 cannot be nil'
      end

      if home_street2.to_s.length > 255
        fail ArgumentError, 'invalid value for "home_street2", the character length must be smaller than or equal to 255.'
      end

      @home_street2 = home_street2
    end

    # Custom attribute writer method with validation
    # @param [Object] home_city Value to be assigned
    def home_city=(home_city)
      if home_city.nil?
        fail ArgumentError, 'home_city cannot be nil'
      end

      if home_city.to_s.length > 50
        fail ArgumentError, 'invalid value for "home_city", the character length must be smaller than or equal to 50.'
      end

      @home_city = home_city
    end

    # Custom attribute writer method with validation
    # @param [Object] home_state Value to be assigned
    def home_state=(home_state)
      if home_state.nil?
        fail ArgumentError, 'home_state cannot be nil'
      end

      if home_state.to_s.length > 50
        fail ArgumentError, 'invalid value for "home_state", the character length must be smaller than or equal to 50.'
      end

      @home_state = home_state
    end

    # Custom attribute writer method with validation
    # @param [Object] home_zip Value to be assigned
    def home_zip=(home_zip)
      if home_zip.nil?
        fail ArgumentError, 'home_zip cannot be nil'
      end

      if home_zip.to_s.length > 50
        fail ArgumentError, 'invalid value for "home_zip", the character length must be smaller than or equal to 50.'
      end

      @home_zip = home_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] home_country Value to be assigned
    def home_country=(home_country)
      if home_country.nil?
        fail ArgumentError, 'home_country cannot be nil'
      end

      if home_country.to_s.length > 50
        fail ArgumentError, 'invalid value for "home_country", the character length must be smaller than or equal to 50.'
      end

      @home_country = home_country
    end

    # Custom attribute writer method with validation
    # @param [Object] work_street Value to be assigned
    def work_street=(work_street)
      if work_street.nil?
        fail ArgumentError, 'work_street cannot be nil'
      end

      if work_street.to_s.length > 255
        fail ArgumentError, 'invalid value for "work_street", the character length must be smaller than or equal to 255.'
      end

      @work_street = work_street
    end

    # Custom attribute writer method with validation
    # @param [Object] work_street2 Value to be assigned
    def work_street2=(work_street2)
      if work_street2.nil?
        fail ArgumentError, 'work_street2 cannot be nil'
      end

      if work_street2.to_s.length > 255
        fail ArgumentError, 'invalid value for "work_street2", the character length must be smaller than or equal to 255.'
      end

      @work_street2 = work_street2
    end

    # Custom attribute writer method with validation
    # @param [Object] work_city Value to be assigned
    def work_city=(work_city)
      if work_city.nil?
        fail ArgumentError, 'work_city cannot be nil'
      end

      if work_city.to_s.length > 50
        fail ArgumentError, 'invalid value for "work_city", the character length must be smaller than or equal to 50.'
      end

      @work_city = work_city
    end

    # Custom attribute writer method with validation
    # @param [Object] work_state Value to be assigned
    def work_state=(work_state)
      if work_state.nil?
        fail ArgumentError, 'work_state cannot be nil'
      end

      if work_state.to_s.length > 50
        fail ArgumentError, 'invalid value for "work_state", the character length must be smaller than or equal to 50.'
      end

      @work_state = work_state
    end

    # Custom attribute writer method with validation
    # @param [Object] work_zip Value to be assigned
    def work_zip=(work_zip)
      if work_zip.nil?
        fail ArgumentError, 'work_zip cannot be nil'
      end

      if work_zip.to_s.length > 50
        fail ArgumentError, 'invalid value for "work_zip", the character length must be smaller than or equal to 50.'
      end

      @work_zip = work_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] work_country Value to be assigned
    def work_country=(work_country)
      if work_country.nil?
        fail ArgumentError, 'work_country cannot be nil'
      end

      if work_country.to_s.length > 50
        fail ArgumentError, 'invalid value for "work_country", the character length must be smaller than or equal to 50.'
      end

      @work_country = work_country
    end

    # Custom attribute writer method with validation
    # @param [Object] other_street Value to be assigned
    def other_street=(other_street)
      if other_street.nil?
        fail ArgumentError, 'other_street cannot be nil'
      end

      if other_street.to_s.length > 255
        fail ArgumentError, 'invalid value for "other_street", the character length must be smaller than or equal to 255.'
      end

      @other_street = other_street
    end

    # Custom attribute writer method with validation
    # @param [Object] other_street2 Value to be assigned
    def other_street2=(other_street2)
      if other_street2.nil?
        fail ArgumentError, 'other_street2 cannot be nil'
      end

      if other_street2.to_s.length > 255
        fail ArgumentError, 'invalid value for "other_street2", the character length must be smaller than or equal to 255.'
      end

      @other_street2 = other_street2
    end

    # Custom attribute writer method with validation
    # @param [Object] other_city Value to be assigned
    def other_city=(other_city)
      if other_city.nil?
        fail ArgumentError, 'other_city cannot be nil'
      end

      if other_city.to_s.length > 50
        fail ArgumentError, 'invalid value for "other_city", the character length must be smaller than or equal to 50.'
      end

      @other_city = other_city
    end

    # Custom attribute writer method with validation
    # @param [Object] other_state Value to be assigned
    def other_state=(other_state)
      if other_state.nil?
        fail ArgumentError, 'other_state cannot be nil'
      end

      if other_state.to_s.length > 50
        fail ArgumentError, 'invalid value for "other_state", the character length must be smaller than or equal to 50.'
      end

      @other_state = other_state
    end

    # Custom attribute writer method with validation
    # @param [Object] other_zip Value to be assigned
    def other_zip=(other_zip)
      if other_zip.nil?
        fail ArgumentError, 'other_zip cannot be nil'
      end

      if other_zip.to_s.length > 50
        fail ArgumentError, 'invalid value for "other_zip", the character length must be smaller than or equal to 50.'
      end

      @other_zip = other_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] other_country Value to be assigned
    def other_country=(other_country)
      if other_country.nil?
        fail ArgumentError, 'other_country cannot be nil'
      end

      if other_country.to_s.length > 50
        fail ArgumentError, 'invalid value for "other_country", the character length must be smaller than or equal to 50.'
      end

      @other_country = other_country
    end

    # Custom attribute writer method with validation
    # @param [Object] cfcustom_field_name Value to be assigned
    def cfcustom_field_name=(cfcustom_field_name)
      if cfcustom_field_name.nil?
        fail ArgumentError, 'cfcustom_field_name cannot be nil'
      end

      if cfcustom_field_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "cfcustom_field_name", the character length must be smaller than or equal to 255.'
      end

      @cfcustom_field_name = cfcustom_field_name
    end

    # Custom attribute writer method with validation
    # @param [Object] sms_number Value to be assigned
    def sms_number=(sms_number)
      if sms_number.nil?
        fail ArgumentError, 'sms_number cannot be nil'
      end

      if sms_number.to_s.length > 16
        fail ArgumentError, 'invalid value for "sms_number", the character length must be smaller than or equal to 16.'
      end

      @sms_number = sms_number
    end

    # Custom attribute writer method with validation
    # @param [Object] sms_consent_date Value to be assigned
    def sms_consent_date=(sms_consent_date)
      if sms_consent_date.nil?
        fail ArgumentError, 'sms_consent_date cannot be nil'
      end

      if sms_consent_date.to_s.length > 16
        fail ArgumentError, 'invalid value for "sms_consent_date", the character length must be smaller than or equal to 16.'
      end

      @sms_consent_date = sms_consent_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          email == o.email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          job_title == o.job_title &&
          company_name == o.company_name &&
          birthday_month == o.birthday_month &&
          birthday_day == o.birthday_day &&
          anniversary == o.anniversary &&
          phone == o.phone &&
          home_phone == o.home_phone &&
          work_phone == o.work_phone &&
          mobile_phone == o.mobile_phone &&
          other_phone == o.other_phone &&
          street == o.street &&
          street2 == o.street2 &&
          city == o.city &&
          state == o.state &&
          zip == o.zip &&
          country == o.country &&
          home_street == o.home_street &&
          home_street2 == o.home_street2 &&
          home_city == o.home_city &&
          home_state == o.home_state &&
          home_zip == o.home_zip &&
          home_country == o.home_country &&
          work_street == o.work_street &&
          work_street2 == o.work_street2 &&
          work_city == o.work_city &&
          work_state == o.work_state &&
          work_zip == o.work_zip &&
          work_country == o.work_country &&
          other_street == o.other_street &&
          other_street2 == o.other_street2 &&
          other_city == o.other_city &&
          other_state == o.other_state &&
          other_zip == o.other_zip &&
          other_country == o.other_country &&
          cfcustom_field_name == o.cfcustom_field_name &&
          sms_number == o.sms_number &&
          sms_consent_date == o.sms_consent_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [email, first_name, last_name, job_title, company_name, birthday_month, birthday_day, anniversary, phone, home_phone, work_phone, mobile_phone, other_phone, street, street2, city, state, zip, country, home_street, home_street2, home_city, home_state, home_zip, home_country, work_street, work_street2, work_city, work_state, work_zip, work_country, other_street, other_street2, other_city, other_state, other_zip, other_country, cfcustom_field_name, sms_number, sms_consent_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConstantContactClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
