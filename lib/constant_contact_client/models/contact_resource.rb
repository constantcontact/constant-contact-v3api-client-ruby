=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.109
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module ConstantContactClient
  # Use this endpoint to retrieve (GET), update (PUT), or DELETE an existing contact resource specified using the <code>contact_id</code> path parameter.
  class ContactResource
    # Unique ID for each contact resource
    attr_accessor :contact_id

    attr_accessor :email_address

    # The first name of the contact.
    attr_accessor :first_name

    # The last name of the contact.
    attr_accessor :last_name

    # The job title of the contact.
    attr_accessor :job_title

    # The name of the company where the contact works.
    attr_accessor :company_name

    # The month value for the contact's birthday. Valid values are from 1 through 12. You must use this property with <code>birthday_month</code>.
    attr_accessor :birthday_month

    # The day value for the contact's birthday. Valid values are from 1 through 12. You must use this property with <code>birthday_day</code>.
    attr_accessor :birthday_day

    # The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.
    attr_accessor :anniversary

    # Identifies who last updated the contact; valid values are  <code>Contact</code> or <code>Account</code>.
    attr_accessor :update_source

    # Describes who added the contact; valid values are <code>Contact</code> or <code>Account</code>. Your integration must accurately identify <code>create_source</code> for compliance reasons; value is set when contact is created.
    attr_accessor :create_source

    # System generated date and time that the resource was created, in ISO-8601 format.
    attr_accessor :created_at

    # System generated date and time that the contact was last updated, in ISO-8601 format.
    attr_accessor :updated_at

    # For deleted contacts (<code>email_address</code> contains <code>opt_out_source</code> and <code>opt_out_date</code>), shows the date of deletion.
    attr_accessor :deleted_at

    # Array of up to 25 <code>custom_field</code> subresources.
    attr_accessor :custom_fields

    # Array of up to 3 <code>phone_numbers</code> subresources.
    attr_accessor :phone_numbers

    # Array of up to 3 <code>street_addresses</code> subresources.
    attr_accessor :street_addresses

    # Array of up to 50 <code>list_ids</code> to which the contact is subscribed.
    attr_accessor :list_memberships

    # Array of tags (<code>tag_id</code>) assigned to the contact, up to a maximum of 50.
    attr_accessor :taggings

    # An array of notes about the contact listed by most recent note first.
    attr_accessor :notes

    attr_accessor :sms_channel

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'contact_id' => :'contact_id',
        :'email_address' => :'email_address',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'job_title' => :'job_title',
        :'company_name' => :'company_name',
        :'birthday_month' => :'birthday_month',
        :'birthday_day' => :'birthday_day',
        :'anniversary' => :'anniversary',
        :'update_source' => :'update_source',
        :'create_source' => :'create_source',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'deleted_at' => :'deleted_at',
        :'custom_fields' => :'custom_fields',
        :'phone_numbers' => :'phone_numbers',
        :'street_addresses' => :'street_addresses',
        :'list_memberships' => :'list_memberships',
        :'taggings' => :'taggings',
        :'notes' => :'notes',
        :'sms_channel' => :'sms_channel'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'contact_id' => :'String',
        :'email_address' => :'GetContactById200ResponseEmailAddress',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'job_title' => :'String',
        :'company_name' => :'String',
        :'birthday_month' => :'Integer',
        :'birthday_day' => :'Integer',
        :'anniversary' => :'String',
        :'update_source' => :'String',
        :'create_source' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'deleted_at' => :'Date',
        :'custom_fields' => :'Array<GetContactById200ResponseCustomFieldsInner>',
        :'phone_numbers' => :'Array<GetContactById200ResponsePhoneNumbersInner>',
        :'street_addresses' => :'Array<GetContactById200ResponseStreetAddressesInner>',
        :'list_memberships' => :'Array<String>',
        :'taggings' => :'Array<String>',
        :'notes' => :'Array<GetContactById200ResponseNotesInner>',
        :'sms_channel' => :'GetContactById200ResponseSmsChannel'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConstantContactClient::ContactResource` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConstantContactClient::ContactResource`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'contact_id')
        self.contact_id = attributes[:'contact_id']
      end

      if attributes.key?(:'email_address')
        self.email_address = attributes[:'email_address']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'job_title')
        self.job_title = attributes[:'job_title']
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      end

      if attributes.key?(:'birthday_month')
        self.birthday_month = attributes[:'birthday_month']
      end

      if attributes.key?(:'birthday_day')
        self.birthday_day = attributes[:'birthday_day']
      end

      if attributes.key?(:'anniversary')
        self.anniversary = attributes[:'anniversary']
      end

      if attributes.key?(:'update_source')
        self.update_source = attributes[:'update_source']
      end

      if attributes.key?(:'create_source')
        self.create_source = attributes[:'create_source']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'deleted_at')
        self.deleted_at = attributes[:'deleted_at']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'phone_numbers')
        if (value = attributes[:'phone_numbers']).is_a?(Array)
          self.phone_numbers = value
        end
      end

      if attributes.key?(:'street_addresses')
        if (value = attributes[:'street_addresses']).is_a?(Array)
          self.street_addresses = value
        end
      end

      if attributes.key?(:'list_memberships')
        if (value = attributes[:'list_memberships']).is_a?(Array)
          self.list_memberships = value
        end
      end

      if attributes.key?(:'taggings')
        if (value = attributes[:'taggings']).is_a?(Array)
          self.taggings = value
        end
      end

      if attributes.key?(:'notes')
        if (value = attributes[:'notes']).is_a?(Array)
          self.notes = value
        end
      end

      if attributes.key?(:'sms_channel')
        self.sms_channel = attributes[:'sms_channel']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@first_name.nil? && @first_name.to_s.length > 50
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 50.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 50
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 50.')
      end

      if !@job_title.nil? && @job_title.to_s.length > 50
        invalid_properties.push('invalid value for "job_title", the character length must be smaller than or equal to 50.')
      end

      if !@company_name.nil? && @company_name.to_s.length > 50
        invalid_properties.push('invalid value for "company_name", the character length must be smaller than or equal to 50.')
      end

      if !@anniversary.nil? && @anniversary.to_s.length > 10
        invalid_properties.push('invalid value for "anniversary", the character length must be smaller than or equal to 10.')
      end

      if !@custom_fields.nil? && @custom_fields.length > 25
        invalid_properties.push('invalid value for "custom_fields", number of items must be less than or equal to 25.')
      end

      if !@phone_numbers.nil? && @phone_numbers.length > 3
        invalid_properties.push('invalid value for "phone_numbers", number of items must be less than or equal to 3.')
      end

      if !@street_addresses.nil? && @street_addresses.length > 3
        invalid_properties.push('invalid value for "street_addresses", number of items must be less than or equal to 3.')
      end

      if !@list_memberships.nil? && @list_memberships.length > 50
        invalid_properties.push('invalid value for "list_memberships", number of items must be less than or equal to 50.')
      end

      if !@taggings.nil? && @taggings.length > 50
        invalid_properties.push('invalid value for "taggings", number of items must be less than or equal to 50.')
      end

      if !@notes.nil? && @notes.length > 150
        invalid_properties.push('invalid value for "notes", number of items must be less than or equal to 150.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@first_name.nil? && @first_name.to_s.length > 50
      return false if !@last_name.nil? && @last_name.to_s.length > 50
      return false if !@job_title.nil? && @job_title.to_s.length > 50
      return false if !@company_name.nil? && @company_name.to_s.length > 50
      return false if !@anniversary.nil? && @anniversary.to_s.length > 10
      return false if !@custom_fields.nil? && @custom_fields.length > 25
      return false if !@phone_numbers.nil? && @phone_numbers.length > 3
      return false if !@street_addresses.nil? && @street_addresses.length > 3
      return false if !@list_memberships.nil? && @list_memberships.length > 50
      return false if !@taggings.nil? && @taggings.length > 50
      return false if !@notes.nil? && @notes.length > 150
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if first_name.nil?
        fail ArgumentError, 'first_name cannot be nil'
      end

      if first_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 50.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, 'last_name cannot be nil'
      end

      if last_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 50.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] job_title Value to be assigned
    def job_title=(job_title)
      if job_title.nil?
        fail ArgumentError, 'job_title cannot be nil'
      end

      if job_title.to_s.length > 50
        fail ArgumentError, 'invalid value for "job_title", the character length must be smaller than or equal to 50.'
      end

      @job_title = job_title
    end

    # Custom attribute writer method with validation
    # @param [Object] company_name Value to be assigned
    def company_name=(company_name)
      if company_name.nil?
        fail ArgumentError, 'company_name cannot be nil'
      end

      if company_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "company_name", the character length must be smaller than or equal to 50.'
      end

      @company_name = company_name
    end

    # Custom attribute writer method with validation
    # @param [Object] anniversary Value to be assigned
    def anniversary=(anniversary)
      if anniversary.nil?
        fail ArgumentError, 'anniversary cannot be nil'
      end

      if anniversary.to_s.length > 10
        fail ArgumentError, 'invalid value for "anniversary", the character length must be smaller than or equal to 10.'
      end

      @anniversary = anniversary
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_fields Value to be assigned
    def custom_fields=(custom_fields)
      if custom_fields.nil?
        fail ArgumentError, 'custom_fields cannot be nil'
      end

      if custom_fields.length > 25
        fail ArgumentError, 'invalid value for "custom_fields", number of items must be less than or equal to 25.'
      end

      @custom_fields = custom_fields
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_numbers Value to be assigned
    def phone_numbers=(phone_numbers)
      if phone_numbers.nil?
        fail ArgumentError, 'phone_numbers cannot be nil'
      end

      if phone_numbers.length > 3
        fail ArgumentError, 'invalid value for "phone_numbers", number of items must be less than or equal to 3.'
      end

      @phone_numbers = phone_numbers
    end

    # Custom attribute writer method with validation
    # @param [Object] street_addresses Value to be assigned
    def street_addresses=(street_addresses)
      if street_addresses.nil?
        fail ArgumentError, 'street_addresses cannot be nil'
      end

      if street_addresses.length > 3
        fail ArgumentError, 'invalid value for "street_addresses", number of items must be less than or equal to 3.'
      end

      @street_addresses = street_addresses
    end

    # Custom attribute writer method with validation
    # @param [Object] list_memberships Value to be assigned
    def list_memberships=(list_memberships)
      if list_memberships.nil?
        fail ArgumentError, 'list_memberships cannot be nil'
      end

      if list_memberships.length > 50
        fail ArgumentError, 'invalid value for "list_memberships", number of items must be less than or equal to 50.'
      end

      @list_memberships = list_memberships
    end

    # Custom attribute writer method with validation
    # @param [Object] taggings Value to be assigned
    def taggings=(taggings)
      if taggings.nil?
        fail ArgumentError, 'taggings cannot be nil'
      end

      if taggings.length > 50
        fail ArgumentError, 'invalid value for "taggings", number of items must be less than or equal to 50.'
      end

      @taggings = taggings
    end

    # Custom attribute writer method with validation
    # @param [Object] notes Value to be assigned
    def notes=(notes)
      if notes.nil?
        fail ArgumentError, 'notes cannot be nil'
      end

      if notes.length > 150
        fail ArgumentError, 'invalid value for "notes", number of items must be less than or equal to 150.'
      end

      @notes = notes
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          contact_id == o.contact_id &&
          email_address == o.email_address &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          job_title == o.job_title &&
          company_name == o.company_name &&
          birthday_month == o.birthday_month &&
          birthday_day == o.birthday_day &&
          anniversary == o.anniversary &&
          update_source == o.update_source &&
          create_source == o.create_source &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          deleted_at == o.deleted_at &&
          custom_fields == o.custom_fields &&
          phone_numbers == o.phone_numbers &&
          street_addresses == o.street_addresses &&
          list_memberships == o.list_memberships &&
          taggings == o.taggings &&
          notes == o.notes &&
          sms_channel == o.sms_channel
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [contact_id, email_address, first_name, last_name, job_title, company_name, birthday_month, birthday_day, anniversary, update_source, create_source, created_at, updated_at, deleted_at, custom_fields, phone_numbers, street_addresses, list_memberships, taggings, notes, sms_channel].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConstantContactClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
