=begin
#Constant Contact API v3

#Swagger build version 3.0.2475

The version of the OpenAPI document: 1.0.109
Contact: webservices@constantcontact.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module ConstantContactClient
  # Key-value pairs of campaign activity statistics.
  class GetEmailCampaignActivityReport200ResponseResultsInnerStats
    # Number of unique email bounces.
    attr_accessor :em_bounces

    # Number of unique recipients who clicked any link in the email.
    attr_accessor :em_clicks

    # Total number of non-unique email clicks.
    attr_accessor :em_clicks_all

    # Number of non-unique email clicks on a standard desktop or laptop computer.
    attr_accessor :em_clicks_all_computer

    # Number of non-unique email clicks on a mobile phone or similar small mobile device (e.g. iPhone).
    attr_accessor :em_clicks_all_mobile

    # Number of non-unique email clicks on a small tablet type computer (e.g. iPad).
    attr_accessor :em_clicks_all_tablet

    # Number of non-unique email clicks on an unknown device (e.g. Game Console or Wearable).
    attr_accessor :em_clicks_all_other

    # Number of non-unique email clicks for which the device type was not captured. This will account for any clicks prior to when device type was collected and stored.
    attr_accessor :em_clicks_all_none

    # Number of unique recipients who forwarded the email using the forward to a friend feature (not available for all types of emails).
    attr_accessor :em_forwards

    # Number of unique recipients who did not open the email. This is calculated as follows: <code>em_not_opened</code> is equal to <code>em_sends - em_opens - em_bounces</code>. This value is reported as zero if the calculation results in a negative value.
    attr_accessor :em_not_opened

    # Number of unique recipients who opened the email.
    attr_accessor :em_opens

    # Total number of non-unique email opens.
    attr_accessor :em_opens_all

    # Number of non-unique email opens on a standard desktop or laptop computer.
    attr_accessor :em_opens_all_computer

    # Number of non-unique email opens on a mobile phone or similar small mobile device (e.g. iPhone).
    attr_accessor :em_opens_all_mobile

    # Number of non-unique email opens on a small tablet type computer (e.g. iPad).
    attr_accessor :em_opens_all_tablet

    # Number of non-unique email opens on an unknown device (e.g. Game Console or Wearable).
    attr_accessor :em_opens_all_other

    # Number of non-unique email opens for which the device type was not captured. This will account for any opens prior to when device type was collected and stored.
    attr_accessor :em_opens_all_none

    # Number of unique recipients who unsubscribed due to this email.
    attr_accessor :em_optouts

    # Number of unique email sends.
    attr_accessor :em_sends

    # Number of abuse (spam) complaints received.
    attr_accessor :em_abuse

    # Unique number bounced because as blocked by the receiving system.
    attr_accessor :em_bounces_blocked

    # Unique number that bounced back with a mailbox full message.
    attr_accessor :em_bounces_mailbox_full

    # Unique number that bounced as a non-existent address.
    attr_accessor :em_bounces_nonexistent_address

    # Unique number that bounced without an identifiable cause.
    attr_accessor :em_bounces_other

    # Unique number that bounced as suspended. Email address bounces as suspended when multiple non-existent bounces have been received for the same address.
    attr_accessor :em_bounces_suspended

    # Unique number that bounced as undeliverable.
    attr_accessor :em_bounces_undeliverable

    # Unique number that bounced back with a vacation or out of office autoreply.
    attr_accessor :em_bounces_vacation

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'em_bounces' => :'em_bounces',
        :'em_clicks' => :'em_clicks',
        :'em_clicks_all' => :'em_clicks_all',
        :'em_clicks_all_computer' => :'em_clicks_all_computer',
        :'em_clicks_all_mobile' => :'em_clicks_all_mobile',
        :'em_clicks_all_tablet' => :'em_clicks_all_tablet',
        :'em_clicks_all_other' => :'em_clicks_all_other',
        :'em_clicks_all_none' => :'em_clicks_all_none',
        :'em_forwards' => :'em_forwards',
        :'em_not_opened' => :'em_not_opened',
        :'em_opens' => :'em_opens',
        :'em_opens_all' => :'em_opens_all',
        :'em_opens_all_computer' => :'em_opens_all_computer',
        :'em_opens_all_mobile' => :'em_opens_all_mobile',
        :'em_opens_all_tablet' => :'em_opens_all_tablet',
        :'em_opens_all_other' => :'em_opens_all_other',
        :'em_opens_all_none' => :'em_opens_all_none',
        :'em_optouts' => :'em_optouts',
        :'em_sends' => :'em_sends',
        :'em_abuse' => :'em_abuse',
        :'em_bounces_blocked' => :'em_bounces_blocked',
        :'em_bounces_mailbox_full' => :'em_bounces_mailbox_full',
        :'em_bounces_nonexistent_address' => :'em_bounces_nonexistent_address',
        :'em_bounces_other' => :'em_bounces_other',
        :'em_bounces_suspended' => :'em_bounces_suspended',
        :'em_bounces_undeliverable' => :'em_bounces_undeliverable',
        :'em_bounces_vacation' => :'em_bounces_vacation'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'em_bounces' => :'Integer',
        :'em_clicks' => :'Integer',
        :'em_clicks_all' => :'Integer',
        :'em_clicks_all_computer' => :'Integer',
        :'em_clicks_all_mobile' => :'Integer',
        :'em_clicks_all_tablet' => :'Integer',
        :'em_clicks_all_other' => :'Integer',
        :'em_clicks_all_none' => :'Integer',
        :'em_forwards' => :'Integer',
        :'em_not_opened' => :'Integer',
        :'em_opens' => :'Integer',
        :'em_opens_all' => :'Integer',
        :'em_opens_all_computer' => :'Integer',
        :'em_opens_all_mobile' => :'Integer',
        :'em_opens_all_tablet' => :'Integer',
        :'em_opens_all_other' => :'Integer',
        :'em_opens_all_none' => :'Integer',
        :'em_optouts' => :'Integer',
        :'em_sends' => :'Integer',
        :'em_abuse' => :'Integer',
        :'em_bounces_blocked' => :'Integer',
        :'em_bounces_mailbox_full' => :'Integer',
        :'em_bounces_nonexistent_address' => :'Integer',
        :'em_bounces_other' => :'Integer',
        :'em_bounces_suspended' => :'Integer',
        :'em_bounces_undeliverable' => :'Integer',
        :'em_bounces_vacation' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConstantContactClient::GetEmailCampaignActivityReport200ResponseResultsInnerStats` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConstantContactClient::GetEmailCampaignActivityReport200ResponseResultsInnerStats`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'em_bounces')
        self.em_bounces = attributes[:'em_bounces']
      end

      if attributes.key?(:'em_clicks')
        self.em_clicks = attributes[:'em_clicks']
      end

      if attributes.key?(:'em_clicks_all')
        self.em_clicks_all = attributes[:'em_clicks_all']
      end

      if attributes.key?(:'em_clicks_all_computer')
        self.em_clicks_all_computer = attributes[:'em_clicks_all_computer']
      end

      if attributes.key?(:'em_clicks_all_mobile')
        self.em_clicks_all_mobile = attributes[:'em_clicks_all_mobile']
      end

      if attributes.key?(:'em_clicks_all_tablet')
        self.em_clicks_all_tablet = attributes[:'em_clicks_all_tablet']
      end

      if attributes.key?(:'em_clicks_all_other')
        self.em_clicks_all_other = attributes[:'em_clicks_all_other']
      end

      if attributes.key?(:'em_clicks_all_none')
        self.em_clicks_all_none = attributes[:'em_clicks_all_none']
      end

      if attributes.key?(:'em_forwards')
        self.em_forwards = attributes[:'em_forwards']
      end

      if attributes.key?(:'em_not_opened')
        self.em_not_opened = attributes[:'em_not_opened']
      end

      if attributes.key?(:'em_opens')
        self.em_opens = attributes[:'em_opens']
      end

      if attributes.key?(:'em_opens_all')
        self.em_opens_all = attributes[:'em_opens_all']
      end

      if attributes.key?(:'em_opens_all_computer')
        self.em_opens_all_computer = attributes[:'em_opens_all_computer']
      end

      if attributes.key?(:'em_opens_all_mobile')
        self.em_opens_all_mobile = attributes[:'em_opens_all_mobile']
      end

      if attributes.key?(:'em_opens_all_tablet')
        self.em_opens_all_tablet = attributes[:'em_opens_all_tablet']
      end

      if attributes.key?(:'em_opens_all_other')
        self.em_opens_all_other = attributes[:'em_opens_all_other']
      end

      if attributes.key?(:'em_opens_all_none')
        self.em_opens_all_none = attributes[:'em_opens_all_none']
      end

      if attributes.key?(:'em_optouts')
        self.em_optouts = attributes[:'em_optouts']
      end

      if attributes.key?(:'em_sends')
        self.em_sends = attributes[:'em_sends']
      end

      if attributes.key?(:'em_abuse')
        self.em_abuse = attributes[:'em_abuse']
      end

      if attributes.key?(:'em_bounces_blocked')
        self.em_bounces_blocked = attributes[:'em_bounces_blocked']
      end

      if attributes.key?(:'em_bounces_mailbox_full')
        self.em_bounces_mailbox_full = attributes[:'em_bounces_mailbox_full']
      end

      if attributes.key?(:'em_bounces_nonexistent_address')
        self.em_bounces_nonexistent_address = attributes[:'em_bounces_nonexistent_address']
      end

      if attributes.key?(:'em_bounces_other')
        self.em_bounces_other = attributes[:'em_bounces_other']
      end

      if attributes.key?(:'em_bounces_suspended')
        self.em_bounces_suspended = attributes[:'em_bounces_suspended']
      end

      if attributes.key?(:'em_bounces_undeliverable')
        self.em_bounces_undeliverable = attributes[:'em_bounces_undeliverable']
      end

      if attributes.key?(:'em_bounces_vacation')
        self.em_bounces_vacation = attributes[:'em_bounces_vacation']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          em_bounces == o.em_bounces &&
          em_clicks == o.em_clicks &&
          em_clicks_all == o.em_clicks_all &&
          em_clicks_all_computer == o.em_clicks_all_computer &&
          em_clicks_all_mobile == o.em_clicks_all_mobile &&
          em_clicks_all_tablet == o.em_clicks_all_tablet &&
          em_clicks_all_other == o.em_clicks_all_other &&
          em_clicks_all_none == o.em_clicks_all_none &&
          em_forwards == o.em_forwards &&
          em_not_opened == o.em_not_opened &&
          em_opens == o.em_opens &&
          em_opens_all == o.em_opens_all &&
          em_opens_all_computer == o.em_opens_all_computer &&
          em_opens_all_mobile == o.em_opens_all_mobile &&
          em_opens_all_tablet == o.em_opens_all_tablet &&
          em_opens_all_other == o.em_opens_all_other &&
          em_opens_all_none == o.em_opens_all_none &&
          em_optouts == o.em_optouts &&
          em_sends == o.em_sends &&
          em_abuse == o.em_abuse &&
          em_bounces_blocked == o.em_bounces_blocked &&
          em_bounces_mailbox_full == o.em_bounces_mailbox_full &&
          em_bounces_nonexistent_address == o.em_bounces_nonexistent_address &&
          em_bounces_other == o.em_bounces_other &&
          em_bounces_suspended == o.em_bounces_suspended &&
          em_bounces_undeliverable == o.em_bounces_undeliverable &&
          em_bounces_vacation == o.em_bounces_vacation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [em_bounces, em_clicks, em_clicks_all, em_clicks_all_computer, em_clicks_all_mobile, em_clicks_all_tablet, em_clicks_all_other, em_clicks_all_none, em_forwards, em_not_opened, em_opens, em_opens_all, em_opens_all_computer, em_opens_all_mobile, em_opens_all_tablet, em_opens_all_other, em_opens_all_none, em_optouts, em_sends, em_abuse, em_bounces_blocked, em_bounces_mailbox_full, em_bounces_nonexistent_address, em_bounces_other, em_bounces_suspended, em_bounces_undeliverable, em_bounces_vacation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConstantContactClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
